@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Extensions.Logging;
@using SelfServiceLibrary.Web.Extensions
@using SelfServiceLibrary.Web.Filters
@using SelfServiceLibrary.Web.Policies
@using SelfServiceLibrary.BL.Exceptions.Authorization
@using SelfServiceLibrary.BL.Exceptions.Business
@using SelfServiceLibrary.BL.Interfaces
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<MainLayout> log
@inject IIssueService issueService

<Layout>
    <Layout Sider="true">
        <LayoutSider>
            <LayoutSiderContent>
                <Bar @ref="@sidebar"
                     Mode="BarMode.VerticalInline"
                     CollapseMode="BarCollapseMode.Hide"
                     Breakpoint="Breakpoint.Tablet"
                     NavigationBreakpoint="Breakpoint.Tablet"
                     ThemeContrast="ThemeContrast.Dark">
                    <BarBrand>
                        <BarItem>
                            <BarLink To="/">
                                <BarIcon IconName="IconName.Dashboard" />
                                Self Service Library
                            </BarLink>
                        </BarItem>
                    </BarBrand>
                    <BarMenu>
                        <BarStart>
                            <BarItem>
                                <BarLink To="/search">
                                    <BarIcon IconName="IconName.Search" />
                                    Search
                                </BarLink>
                            </BarItem>
                            <BarItem>
                                <BarLink To="/books">
                                    <BarIcon IconName="IconName.Book" />
                                    Books
                                </BarLink>
                            </BarItem>
                            <AuthorizeView>
                                <Authorized>
                                    <BarItem>
                                        <BarLink To="/my-issues">
                                            <BarIcon IconName="IconName.BookReader" />
                                            My Issues <Badge Color="Color.Light">@myIssuesCount</Badge>
                                        </BarLink>
                                    </BarItem>
                                </Authorized>
                            </AuthorizeView>

                            <AuthorizeView Policy="@LibrarianPolicy.NAME">
                                <Divider />
                                <BarItem>
                                    <BarLink To="/issues">
                                        <BarIcon IconName="IconName.Bookmark" />
                                        All Issues <Badge Color="Color.Light">@allIssuesCount</Badge>
                                    </BarLink>
                                </BarItem>
                                <BarItem>
                                    <BarLink To="/guests">
                                        <BarIcon IconName="IconName.Users" />
                                        Guests
                                    </BarLink>
                                </BarItem>
                                <BarItem>
                                    <BarLink To="/permissions">
                                        <BarIcon IconName="IconName.Ban" />
                                        Permissions
                                    </BarLink>
                                </BarItem>
                                <BarItem>
                                    <BarLink To="/settings">
                                        <BarIcon IconName="IconName.Edit" />
                                        Settings
                                    </BarLink>
                                </BarItem>
                            </AuthorizeView>
                            <AuthorizeView Policy="@AdminPolicy.NAME">
                                <Divider />
                                <BarItem>
                                    <BarLink To="/librarians">
                                        <BarIcon IconName="IconName.Users" />
                                        Librarians
                                    </BarLink>
                                </BarItem>
                            </AuthorizeView>
                        </BarStart>
                        <BarEnd>
                            <AuthorizeView>
                                <NotAuthorized>
                                    <!-- KIOSK hides login-button class for user's convenience, authorization is not affected-->
                                    <BarItem Class="login-button">
                                        <a href="/login" class="b-bar-link login-button"><BarIcon IconName="IconName.User" /> Login</a>
                                    </BarItem>
                                </NotAuthorized>
                                <Authorized>
                                    <BarItem>
                                        <BarLink To="/profile">
                                            <BarIcon IconName="IconName.User" />
                                            Profile
                                        </BarLink>
                                    </BarItem>
                                    <BarItem Class="login-button">
                                        <a href="/logout" class="b-bar-link login-button"><BarIcon IconName="IconName.Lock" /> Logout</a>
                                    </BarItem>
                                </Authorized>
                            </AuthorizeView>
                        </BarEnd>
                    </BarMenu>
                </Bar>
            </LayoutSiderContent>
        </LayoutSider>
        <Layout>
            <LayoutHeader Fixed="true">
                <Bar Mode="BarMode.Horizontal"
                     Background="Background.Light"
                     ThemeContrast="ThemeContrast.Light">
                    <BarBrand>
                        <BarItem>
                            @pageTitle
                        </BarItem>
                    </BarBrand>
                    <BarToggler Bar="@sidebar" Display="Display.InlineBlock.None.OnDesktop" />
                    <AuthorizeView>
                        <BarEnd>
                            <div class="login-user">
                                @context.User.Claims.GetUserBasicInfo().ToString()
                            </div>
                        </BarEnd>
                    </AuthorizeView>
                </Bar>
            </LayoutHeader>
            <LayoutContent>
                <CascadingValue Value="this">
                    @Body
                </CascadingValue>
            </LayoutContent>
        </Layout>
    </Layout>
</Layout>

<SnackbarStack @ref="snackbarStack" Location="SnackbarStackLocation.Center" DefaultInterval="4500" />

@code {
    private SnackbarStack snackbarStack = new SnackbarStack();
    private Bar? sidebar;
    private string? pageTitle;
    private int myIssuesCount;
    private int allIssuesCount;

    public void ChangeTitle(string value)
    {
        pageTitle = value;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        allIssuesCount = await issueService.Count(new IssuesFilter { IsReturned = false });
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (state.User.Identity != null)
        {
            myIssuesCount = await issueService.Count(new IssuesFilter
            {
                IsReturned = false,
                IssuedToInfo = state.User.Claims.GetUserBasicInfo()
            });
        }
    }

    public async Task<bool> ExecuteSafe(Func<Task> thunk)
    {
        try
        {
            await thunk();
            return true;
        }
        catch (AuthorizationException ex)
        {
            log.LogWarning(ex, "An attempt to perform an unauthorized operation has occured.");
            await snackbarStack.PushAsync(ex.Message, title: "Unauthorized", color: SnackbarColor.Danger);
            return false;
        }
        catch (BusinessLayerException ex)
        {
            log.LogError(ex, "Business Layer exception occured.");
            await snackbarStack.PushAsync(ex.Message, title: "Error", color: SnackbarColor.Danger);
            return false;
        }
    }
}