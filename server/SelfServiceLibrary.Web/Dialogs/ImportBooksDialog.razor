@using System.Text
@using SelfServiceLibrary.DAL.Entities
@using SelfServiceLibrary.BL.Interfaces
@using SelfServiceLibrary.Web.Extensions
@using Microsoft.AspNetCore.Components.Authorization

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IBookService bookService
@inject NavigationManager uriHelper

<Modal @ref="modalRef">
    <ModalContent IsCentered="true" Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>Import books</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <FileEdit Filter=".csv, .txt" Changed="@OnChanged" Multiple="true" />
            @foreach (var error in errors)
            {
                <Alert Color="Color.Danger" Visible="true">
                    <Heading Size="HeadingSize.Is4">
                        @error.FileName
                        <CloseButton />
                    </Heading>
                    @foreach (var line in error.Message.Split(Environment.NewLine))
                    {
                        <Paragraph>
                            @line
                        </Paragraph>
                    }
                </Alert>
            }
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
            <Button Disabled="@(files.Length == 0 || isUploading)" Loading="@isUploading" Color="Color.Success" Clicked="@Import">Import</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<SnackbarStack @ref="snackbarStack" Location="SnackbarStackLocation.Center" />

@code {
    public record CsvError(string FileName, string Message);

    private SnackbarStack snackbarStack = new SnackbarStack();
    private Modal? modalRef;
    private IFileEntry[] files = Array.Empty<IFileEntry>();
    private bool isUploading;
    private List<CsvError> errors = new List<CsvError>();

    private void OnChanged(FileChangedEventArgs e)
    {
        files = e.Files;
    }

    private async Task Import()
    {
        errors.Clear();
        isUploading = true;
        // 5 Megabytes = 5242880 Bytes
        foreach (var file in files)
        {
            try
            {
                await bookService.ImportCsv(file.OpenReadStream(5242880));
                await snackbarStack.PushAsync($"File {file.Name} imported.", SnackbarColor.Success);
            }
            catch (CsvHelper.TypeConversion.TypeConverterException ex)
            {
                var builder = new StringBuilder();
                builder.AppendLine($"Error on row: {ex.Context.Parser.Row}");
                builder.AppendLine(ex.Context.Parser.RawRecord);
                var fields = ex.MemberMapData.Names;
                builder.AppendLine($"Invalid value {ex.Text} in fields {string.Join(" ", fields)}.");
                var message = builder.ToString();
                errors.Add(new CsvError(file.Name, message));
            }
            catch (Exception ex)
            {
                errors.Add(new CsvError(file.Name, ex.Message));
            }
        }
        isUploading = false;

        if (errors.Any())
            StateHasChanged();
        else
            HideModal();
    }

    public void Show() =>
        modalRef?.Show();

    private void HideModal() =>
        modalRef?.Hide();
}
