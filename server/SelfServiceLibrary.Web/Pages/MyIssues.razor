@page "/my-issues"
@attribute [Authorize]

@using SelfServiceLibrary.Web.Extensions
@using SelfServiceLibrary.Web.Filters
@using SelfServiceLibrary.BL.Interfaces
@using SelfServiceLibrary.BL.DTO.Issue
@using Microsoft.AspNetCore.Components.Authorization
@inject IIssueService issueService
@inject AuthenticationStateProvider AuthenticationStateProvider

<Container Fluid="true">
    <IssueFilter Filter="filter" FilterChanged="FilterChanged" />

    <DataGrid RowSelectable=@(_ => false)
              TItem="IssueListDTO"
              Data="@issues"
              ShowPager="true"
              PagerPosition="DataGridPagerPosition.Bottom"
              ShowPageSizes="true"
              Responsive="true">
        <LoadingTemplate>
            <Loading />
        </LoadingTemplate>
        <DataGridColumns>
            <DataGridColumn TItem="IssueListDTO" Field="@nameof(IssueListDTO.BookName)" Caption="Item" Sortable="true">
                <DisplayTemplate>
                    <!-- Full name specified due to https://github.com/dotnet/aspnetcore/issues/18685 -->
                    <Blazorise.Link To="@($"/books/{context.DepartmentNumber}")">@context.BookName</Blazorise.Link>
                    <div><Badge Color="Color.Secondary">@context.DepartmentNumber</Badge></div>
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridDateColumn TItem="IssueListDTO" Field="@nameof(IssueListDTO.IssueDate)" DisplayFormat="{0:dd.MM.yyyy}" Caption="Issue date" Sortable="true" />
            <DataGridDateColumn TItem="IssueListDTO" Field="@nameof(IssueListDTO.ExpiryDate)" DisplayFormat="{0:dd.MM.yyyy}" Caption="Expiry date" Sortable="true" />
            <DataGridDateColumn TItem="IssueListDTO" Field="@nameof(IssueListDTO.ReturnDate)" DisplayFormat="{0:dd.MM.yyyy}" Caption="Return date" Sortable="true" />
            <DataGridCheckColumn TItem="IssueListDTO" Field="@nameof(IssueListDTO.IsReturned)" Caption="Reutrned" Sortable="true" Filterable="true">
                <DisplayTemplate>
                    <Check TValue="bool" Checked="context.IsReturned" Disabled="true" ReadOnly="true" />
                </DisplayTemplate>
            </DataGridCheckColumn>
        </DataGridColumns>
    </DataGrid>
</Container>

@code {
    private List<IssueListDTO> issues = new List<IssueListDTO>();
    private IssuesFilter filter = new IssuesFilter();

    [CascadingParameter]
    protected MainLayout Main { get; set; } = new MainLayout();

    protected override async Task OnInitializedAsync()
    {
        Main?.ChangeTitle("My issues");
        await LoadData();

        // sort by returned desc and then by expiry date by default
        issues.Sort((x, y) => x.IsReturned.CompareTo(y.IsReturned) switch
        {
            var ret when ret == 0 => x.ExpiryDate.CompareTo(y.ExpiryDate),
            _ => x.IsReturned.CompareTo(y.IsReturned)
        });
    }

    private async Task LoadData()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (state.User.Identity != null)
        {
            issues = await issueService.GetAll(filter with { IssuedToInfo = state.User.Claims.GetUserBasicInfo() });
        }
    }

    private Task FilterChanged(IssuesFilter filter)
    {
        this.filter = filter;
        return LoadData();
    }
}
