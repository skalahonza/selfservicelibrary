@page "/librarians"
@attribute [Authorize(Policy = AdminPolicy.NAME)]
@using SelfServiceLibrary.DAL.Enums
@using SelfServiceLibrary.Web.Policies
@using SelfServiceLibrary.BL.Services
@using SelfServiceLibrary.BL.DTO.User
@inject UserService service

<Bar Breakpoint="Breakpoint.Desktop"
     Background="Background.Light"
     ThemeContrast="ThemeContrast.Light">
    <BarBrand>
        Librarians
    </BarBrand>
</Bar>

<Container Fluid="true">
    <DataGrid TItem="UserListDTO"
              Data="@librarians"
              RowSelectable=@(_ => false)
              Editable="true"
              SortMode="DataGridSortMode.Multiple"
              EditMode="DataGridEditMode.Inline"
              RowInserted="@OnRowInserted"
              RowRemoved="@OnRowRemoved">
        <DataGridCommandColumn TItem="UserListDTO" Width="170px">
            <NewCommandTemplate>
                <Button Color="Color.Success" Clicked="@context.Clicked">Add</Button>
            </NewCommandTemplate>
            <EditCommandTemplate>
            </EditCommandTemplate>
            <SaveCommandTemplate>
                <Button Color="Color.Primary" Clicked="@context.Clicked">Save</Button>
            </SaveCommandTemplate>
            <DeleteCommandTemplate>
                <Button Color="Color.Danger" Clicked="@context.Clicked">Delete</Button>
            </DeleteCommandTemplate>
            <CancelCommandTemplate>
                <Button Color="Color.Secondary" Clicked="@context.Clicked">Cancel</Button>
            </CancelCommandTemplate>
        </DataGridCommandColumn>
        <DataGridColumn TItem="UserListDTO" Field="@nameof(UserListDTO.Username)" Caption="Username" Editable="true" CellsEditableOnEditCommand="false" CellsEditableOnNewCommand="true" />
    </DataGrid>
</Container>

<SnackbarStack @ref="snackbarStack" Location="SnackbarStackLocation.Right" />

@code {
    SnackbarStack? snackbarStack;
    private List<UserListDTO> librarians = new List<UserListDTO>();

    protected override async Task OnInitializedAsync()
    {
        librarians = await service.GetAll(Role.Librarian);
    }

    private async Task OnRowInserted(SavedRowItem<UserListDTO, Dictionary<string, object>> e)
    {
        var added = await service.AddRole(e.Item.Username, Role.Librarian);
        if (!added)
        {
            await snackbarStack.PushAsync("Such user is already a librarian.", SnackbarColor.Danger);
            librarians = await service.GetAll(Role.Librarian);
        }
    }

    private Task OnRowRemoved(UserListDTO item) =>
        service.RemoveRole(item.Username, Role.Librarian);
}
