@page "/books"
@using SelfServiceLibrary.Service.Services
@using SelfServiceLibrary.Service.DTO.Book
@using Service.DTO.Issue
@using Microsoft.AspNetCore.Components.Authorization
@inject BookService bookService
@inject IssueService issueService
@inject AuthenticationStateProvider AuthenticationStateProvider

<Bar Breakpoint="Breakpoint.Desktop"
     Background="Background.Light"
     ThemeContrast="ThemeContrast.Light">
    <BarBrand>
        Books
    </BarBrand>
    <BarToggler />
    <BarMenu>
        <BarStart>
            <BarItem>
                <Inline>
                    <Field>
                        <Button Color="Color.Danger" Clicked="@DeleteAll" Disabled="true">Delete all !</Button>
                    </Field>
                    <Field Margin="Margin.Is3.OnX.OnTablet">
                        <Label>Import CSV</Label>
                    </Field>
                    <Field>
                        <InputFile OnChange="@OnInputFileChange" accept=".csv, .txt" single>Import CSV</InputFile>
                    </Field>
                </Inline>
            </BarItem>
        </BarStart>
    </BarMenu>
</Bar>

<Container Fluid="true">
    <DataGrid RowSelectable=@(_ => false)
              TItem="BookListDTO"
              Data="@books"
              ReadData="@OnReadData"
              TotalItems="@totalBooks"
              ShowPager="true"
              PagerPosition="DataGridPagerPosition.Bottom"
              PageSize="10">
        <DataGridColumn TItem="BookListDTO" Field="@nameof(BookListDTO.DepartmentNumber)" Caption="#" Sortable="false" />
        <DataGridColumn TItem="BookListDTO" Field="@nameof(BookListDTO.Name)" Caption="Name" Sortable="true" />
        <DataGridColumn TItem="BookListDTO" Field="@nameof(BookListDTO.Author)" Caption="Author" Sortable="true" />
        <DataGridCheckColumn TItem="BookListDTO" Field="@nameof(BookListDTO.IsAvailable)" Caption="Available" Sortable="true">
            <DisplayTemplate>
                <Check TValue="bool" Checked="context.IsAvailable" Disabled="true" ReadOnly="true" />
            </DisplayTemplate>
        </DataGridCheckColumn>

        <AuthorizeView>
            <Authorized>
                <DataGridColumn TItem="BookListDTO" Field="@nameof(BookListDTO.IsAvailable)" Caption="Actions">
                    <DisplayTemplate Context="item">
                        <Button Disabled="@(!item.IsAvailable)" Color="Color.Success" Clicked="() => Borrow(item)">Borrow</Button>
                    </DisplayTemplate>
                </DataGridColumn>
            </Authorized>
        </AuthorizeView>
    </DataGrid>
</Container>

@code {
    private List<BookListDTO> books;
    private int? totalBooks;

    protected override async Task OnInitializedAsync()
    {
        totalBooks = (int)await bookService.GetTotalCount();
    }

    private async Task DeleteAll()
    {
        await bookService.DeleteAll();
        totalBooks = 0;
        books.Clear();
        StateHasChanged();
    }

    private async Task OnReadData(DataGridReadDataEventArgs<BookListDTO> e)
    {
        var sortings = e.Columns.Where(x => x.Direction != SortDirection.None).ToDictionary(x => x.Field, x => x.Direction);
        var searches = e.Columns.Where(x => !string.IsNullOrEmpty(x.SearchValue)).ToDictionary(x => x.Field, x => x.SearchValue);

        books = await bookService.GetAll(e.Page, e.PageSize);
        StateHasChanged();
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        // 5 Megabytes = 5242880 Bytes
        await bookService.ImportCsv(e.File.OpenReadStream(5242880));

        totalBooks = (int)await bookService.GetTotalCount(false);
        books = await bookService.GetAll(1, 15);
        StateHasChanged();
    }

    private async Task Borrow(BookListDTO book)
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        await issueService.Borrow(state.User.Identity.Name, book.DepartmentNumber, new IssueCreateDTO
        {
            ExpiryDate = DateTime.UtcNow.AddDays(30)
        });
        book.IsAvailable = false;
        StateHasChanged();
    }
}
