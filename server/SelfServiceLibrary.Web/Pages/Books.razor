@page "/books"
@using SelfServiceLibrary.Service.Services
@using SelfServiceLibrary.Service.DTO.Book
@inject NavigationManager uriHelper
@inject BookService bookService
@inject IssueService issueService

<Bar Breakpoint="Breakpoint.Desktop"
     Background="Background.Light"
     ThemeContrast="ThemeContrast.Light">
    <BarBrand>
        Books
    </BarBrand>
    <BarToggler />
    <BarMenu>
        <BarStart>
            <BarItem>
                <Inline>
                    <Field>
                        <Button Color="Color.Danger" Clicked="@DeleteAll">Delete all !</Button>
                    </Field>
                    <Field Margin="Margin.Is3.OnX.OnTablet">
                        <Label>Import CSV</Label>
                    </Field>
                    <Field>
                        <InputFile OnChange="@OnInputFileChange" accept=".csv, .txt" multiple>Import CSV</InputFile>
                    </Field>
                </Inline>
            </BarItem>
        </BarStart>
    </BarMenu>
</Bar>

<Container Fluid="true">
    <Tabs SelectedTab="@selectedPublicationType" SelectedTabChanged="OnSelectedTabChanged">
        <Items>
            @foreach (var (type, count) in publicationTypes.Select(x => (x.Key, x.Value)).OrderByDescending(x => x.Value))
            {
                <Tab Name="@type">@type <Badge Color="Color.Primary">@count</Badge></Tab>
            }
        </Items>
        <Content>
            @foreach (var type in publicationTypes.OrderByDescending(x => x.Value).Select(x => x.Key))
            {
                <TabPanel Name="@type">
                    <DataGrid RowSelectable=@(_ => false)
                              TItem="BookListDTO"
                              Data="@books[type]"
                              ReadData="@((e) => OnReadData(e,type))"
                              TotalItems="@publicationTypes[type]"
                              ShowPager="true"
                              PagerPosition="DataGridPagerPosition.Top"
                              PageSize="@pageSize">
                        <DataGridColumn TItem="BookListDTO" Field="@nameof(BookListDTO.DepartmentNumber)" Caption="#" Sortable="false">
                            <DisplayTemplate>
                                <a href="@($"books/{context.DepartmentNumber}")">@context.DepartmentNumber</a>
                            </DisplayTemplate>
                        </DataGridColumn>
                        <DataGridColumn TItem="BookListDTO" Field="@nameof(BookListDTO.Name)" Caption="Name" Sortable="true" />
                        <DataGridColumn TItem="BookListDTO" Field="@nameof(BookListDTO.Author)" Caption="Author" Sortable="true" />
                        <DataGridColumn TItem="BookListDTO" Field="@nameof(BookListDTO.Keywords)" Caption="Keywords" Sortable="false">
                            <DisplayTemplate>
                                @foreach (var keyword in context.Keywords)
                                {
                                    <Badge Color="Color.Info" Margin="Margin.Is1">@keyword</Badge>
                                }
                            </DisplayTemplate>
                        </DataGridColumn>
                        <DataGridCheckColumn TItem="BookListDTO" Field="@nameof(BookListDTO.IsAvailable)" Caption="Available" Sortable="true">
                            <DisplayTemplate>
                                <Check TValue="bool" Checked="context.IsAvailable" Disabled="true" ReadOnly="true" />
                            </DisplayTemplate>
                        </DataGridCheckColumn>
                    </DataGrid>
                </TabPanel>
            }
        </Content>
    </Tabs>
</Container>

@code {
    private string selectedPublicationType;
    private int pageSize = 10;

    private Dictionary<string, int> publicationTypes = new Dictionary<string, int>();
    private Dictionary<string, List<BookListDTO>> books = new Dictionary<string, List<BookListDTO>>();

    protected override async Task OnInitializedAsync()
    {
        publicationTypes = await bookService.GetPublicationTypes();
        books = publicationTypes.ToDictionary(x => x.Key, _ => new List<BookListDTO>());
        if (publicationTypes.Any())
            selectedPublicationType = publicationTypes.Aggregate((l, r) => l.Value > r.Value ? l : r).Key;
    }

    private async Task DeleteAll()
    {
        await bookService.DeleteAll();
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
    }

    private async Task OnReadData(DataGridReadDataEventArgs<BookListDTO> e, string publicationType)
    {
        var sortings = e.Columns.Where(x => x.Direction != SortDirection.None).ToDictionary(x => x.Field, x => x.Direction);
        var searches = e.Columns.Where(x => !string.IsNullOrEmpty(x.SearchValue)).ToDictionary(x => x.Field, x => x.SearchValue);

        books[publicationType] = await bookService.GetAll(e.Page, e.PageSize, publicationType);
        StateHasChanged();
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        // 5 Megabytes = 5242880 Bytes
        foreach (var file in e.GetMultipleFiles())
        {
            await bookService.ImportCsv(file.OpenReadStream(5242880));
        }

        publicationTypes = await bookService.GetPublicationTypes();
        books = publicationTypes.ToDictionary(x => x.Key, _ => new List<BookListDTO>());
        selectedPublicationType = publicationTypes.Aggregate((l, r) => l.Value > r.Value ? l : r).Key;
        books[selectedPublicationType] = await bookService.GetAll(1, pageSize);
        StateHasChanged();
    }

    private void OnSelectedTabChanged(string name)
    {
        selectedPublicationType = name;
    }
}
