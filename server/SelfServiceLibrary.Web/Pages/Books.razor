@page "/books"
@using SelfServiceLibrary.Web.Attributes
@using SelfServiceLibrary.Web.Extensions
@using SelfServiceLibrary.Web.Filters
@using SelfServiceLibrary.Web.Policies
@using SelfServiceLibrary.DAL.Enums
@using SelfServiceLibrary.BL.Interfaces
@using SelfServiceLibrary.BL.ViewModels
@using SelfServiceLibrary.BL.DTO.Book
@using SelfServiceLibrary.BL.DTO.BookStatus
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel
@inject IJSRuntime jsRuntime
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager uriHelper
@inject IMapper mapper
@inject IBookService bookService
@inject IBookStatusService bookStatusService
@inject IIssueService issueService

<Container Fluid="true">
    <AuthorizeView Policy="@LibrarianPolicy.NAME" Context="none">
        <Button Margin="Margin.Is2.OnY" Color="Color.Success" Clicked="@(() => addBookModal?.Show())">Add New Item</Button>
    </AuthorizeView>
    <Button Margin="Margin.Is2.OnY" Color="Color.Primary" Clicked="@(() => filterVisible = !filterVisible)">
        Filter <Icon Name="IconName.Filter" />
    </Button>
    @if (filterVisible)
    {
        <Button Margin="Margin.Is2.OnY" Color="Color.Warning" Clicked="ClearFilter">Clear Filter</Button>
    }
    <Divider />

    @if (filterVisible)
    {
        <BookFilter Filter="filter" FilterChanged="FilterChanged" />
        <Divider />
    }

    <BadgedTabs Tabs="@types.ToList()" TabCounts="publicationTypes" SelectedTab="@filter.PublicationType" SelectedTabChanged="OnSelectedTabChanged" />

    <DataGrid @ref="dataGrid"
              RowSelectable=@(_ => false)
              TItem="BookListDTO"
              Data="@books.Data"
              TotalItems="@books.Count"
              ReadData="@OnReadData"
              ShowPager="true"
              PagerPosition="DataGridPagerPosition.Bottom"
              ShowPageSizes="true"
              PageSize="PageSize"
              PageSizeChanged="PageSizeChanged"
              CurrentPage="Page"
              PageChanged="PageChanged">
        <LoadingTemplate>
            <Loading />
        </LoadingTemplate>
        <DataGridColumns>
            <DataGridColumn TItem="BookListDTO" HeaderCellClass="d-none d-sm-block" CellClass="@((_) => "d-none d-sm-block")" Caption="Ident" Field="@nameof(BookListDTO.DepartmentNumber)" Sortable="true">
                <DisplayTemplate>
                    <a href="@($"books/{context.DepartmentNumber}")">@context.DepartmentNumber</a>
                    <div>@context.Storage</div>
                    <AuthorizeView Policy="@LibrarianPolicy.NAME" Context="auth">
                        <Check TValue="bool" Checked="context.StsLocal" Disabled="true" ReadOnly="true">
                            StsLocal
                        </Check>
                        <Check TValue="bool" Checked="context.StsUK" Disabled="true" ReadOnly="true">
                            StsUK
                        </Check>
                    </AuthorizeView>
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="BookListDTO" Field="@nameof(BookListDTO.Name)" Caption="Name" Sortable="true">
                <DisplayTemplate>
                    <!-- Full name specified due to https://github.com/dotnet/aspnetcore/issues/18685 -->
                    <Blazorise.Link To="@($"/books/{context.DepartmentNumber}")">@context.Name</Blazorise.Link>
                    <div><Badge Display="Display.Block.OnMobile.None.OnTablet" Color="Color.Secondary">@context.DepartmentNumber</Badge></div>
                    @if (context.CoAuthors.Prepend(context.Author).Any(x => !string.IsNullOrEmpty(x)))
                    {
                        <div>
                            <Icon Name="IconName.User" /> @string.Join(", ", context.CoAuthors.Prepend(context.Author))
                        </div>
                    }
                    <div><Keywords Words="context.Keywords" /></div>
                    @if (context.ReviewsCount > 0)
                    {
                        <RatingCard CompactView="true" Average="context.ReviewsAvg.GetValueOrDefault()" Total="context.ReviewsCount" />
                    }
                    <AuthorizeView Context="Auth" Policy="@LibrarianPolicy.NAME">
                        @{
                            var numbers = new[] { ("Sys", context.SystemNumber), ("UK", context.FelNumber), ("ISBN", context.ISBNorISSN) };
                            @string.Join(" / ", numbers.Select(x => $"{x.Item1}: {x.Item2?.DashEmpty()}"))
                        }

                        @if (!string.IsNullOrEmpty(context.Note))
                        {
                            <Tooltip Text="@context.Note" Placement="Placement.Top">
                                <Button Color="Color.Link" Size="Size.ExtraSmall" Disabled="true">Note</Button>
                            </Tooltip>
                        }
                    </AuthorizeView>
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="BookListDTO" HeaderCellClass="d-none d-sm-block" CellClass="@((_) => "d-none d-sm-block")" Field="@nameof(BookListDTO.Author)" Sortable="true" Caption="Main Author"/>
            <DataGridColumn TItem="BookListDTO" Field="@nameof(BookListDTO.Publication)" Sortable="false" Filterable="false" Caption="Publication">
                <DisplayTemplate>
                    @if (context.YearOfPublication.HasValue)
                    {
                        <div><Badge>Year: @context.YearOfPublication</Badge></div>
                    }
                    @if (context.Pages.HasValue)
                    {
                        <div><Badge>Pages: @context.Pages</Badge></div>
                    }
                    @if (context.Publication.HasValue)
                    {
                        <div><Badge>Edition: @context.Publication</Badge></div>
                    }
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="BookListDTO" Field="@nameof(BookListDTO.StatusName)" Caption="Available" Sortable="false">
                <DisplayTemplate>
                    <div>
                        <Check TValue="bool" Checked="context.IsAvailable" Disabled="true" ReadOnly="true">
                            <div class="@(context.IsAvailable ? "text-success" : "text-danger")">
                                @(context.IsAvailable ? "Yes" : "No")
                            </div>
                        </Check>
                        <div><Badge Color="Color.Light">@context.FormType</Badge></div>
                        @if (context.StatusName != "Default")
                        {
                            <div><Badge Color="Color.Info">@context.StatusName</Badge></div>
                        }
                    </div>
                </DisplayTemplate>
            </DataGridColumn>
        </DataGridColumns>
    </DataGrid>

</Container>

<AddBookDialog @ref="addBookModal" />

@code {
    private bool filterVisible;
    private const string AllTab = "All";
    private AddBookDialog? addBookModal;
    private DataGrid<BookListDTO> dataGrid = new DataGrid<BookListDTO>();

    private BooksFilter filter = new BooksFilter(AllTab);

    private Dictionary<string, int> publicationTypes = new Dictionary<string, int>    {
        {AllTab, 0}
    };
    private PaginatedVM<BookListDTO> books = new PaginatedVM<BookListDTO>(0, new List<BookListDTO>());
    private List<BookStatusListDTO> statuses = new List<BookStatusListDTO>();

    private IEnumerable<string> types => publicationTypes
       .Where(x => x.Key != AllTab)
       .OrderBy(x => x.Key)
       .Select(x => x.Key)
       .Prepend(AllTab);

    [CascadingParameter]
    protected MainLayout Main { get; set; } = new MainLayout();

    [QueryStringParameter]
    public int Page { get; set; } = 1;

    [QueryStringParameter]
    public int PageSize { get; set; } = 5;

    [QueryStringParameter]
    public string? Type { get => filter.PublicationType; set => filter.PublicationType = value; }

    [QueryStringParameter]
    public string? Departmentnumber { get => filter.Departmentnumber; set => filter.Departmentnumber = value; }

    [QueryStringParameter]
    public string? Name { get => filter.Name; set => filter.Name = value; }

    [QueryStringParameter]
    public string? Author { get => filter.Author; set => filter.Author = value; }

    [QueryStringParameter]
    public string? Status { get => filter.Status; set => filter.Status = value; }

    [QueryStringParameter]
    public string? IsAvailable
    {
        get => filter.IsAvailable?.ToString(); set
        {
            if (bool.TryParse(value, out var isAvailable) && isAvailable)
                filter.IsAvailable = true;

            else
                filter.IsAvailable = null;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var state = await authenticationStateProvider.GetAuthenticationStateAsync();
        filter.UserRoles = state.User.Claims.GetRoles();

        statuses = await bookStatusService.GetAll();
        publicationTypes = await bookService.GetPublicationTypes(filter with { PublicationType = null });
        publicationTypes[AllTab] = publicationTypes.Select(x => x.Value).Sum();
        Main?.ChangeTitle("Books");
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        this.SetParametersFromQueryString(uriHelper);
        return base.SetParametersAsync(parameters);
    }

    private ValueTask UpdateQuery()
    {
        return this.UpdateQueryString(uriHelper, jsRuntime);
    }

    private async Task FilterChanged(BooksFilter filter)
    {
        await UpdateQuery();
        await dataGrid.Reload();
    }

    private async Task PageSizeChanged(int value)
    {
        PageSize = value;
        await UpdateQuery();
    }

    private async Task PageChanged(DataGridPageChangedEventArgs args)
    {
        Page = args.Page;
        await UpdateQuery();
    }

    private async Task OnSelectedTabChanged(string name)
    {
        filter.PublicationType = name;
        await UpdateQuery();
        await dataGrid.Reload();
    }

    private async Task OnReadData(DataGridReadDataEventArgs<BookListDTO> e)
    {
        var sortings = e.GetSortingCriteria().ToList();

        if (sortings.Count == 0)
        {
            sortings.Add((nameof(BookListDTO.DepartmentNumber), ListSortDirection.Ascending));
        }

        // display all publication types when AllTab selected
        var vm = await bookService.GetAll(e.Page, e.PageSize, filter with
        {
            PublicationType = filter.PublicationType == AllTab ? null : filter.PublicationType
        }, sortings);

        books = vm;

        // update tab counts
        publicationTypes[AllTab] = 0;
        var types = await bookService.GetPublicationTypes(filter with { PublicationType = null });
        foreach (var type in publicationTypes.Select(x => x.Key))
        {
            if (types.TryGetValue(type, out var count))
            {
                publicationTypes[type] = count;
                publicationTypes[AllTab] += count;
            }
            else if (type != AllTab)
            {
                publicationTypes[type] = 0;
            }
        }
        StateHasChanged();

        
    }

    private async Task ClearFilter()
    {
        filter = new BooksFilter(filter.PublicationType ?? AllTab);
        await UpdateQuery();
        await dataGrid.Reload();
    }
}
