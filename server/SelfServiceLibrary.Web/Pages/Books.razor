@page "/books"
@using SelfServiceLibrary.Web.Extensions
@using SelfServiceLibrary.Web.Policies
@using SelfServiceLibrary.BL.Services
@using SelfServiceLibrary.BL.DTO.Book
@inject NavigationManager uriHelper
@inject BookService bookService
@inject IssueService issueService

<Bar Breakpoint="Breakpoint.Desktop"
     Background="Background.Light"
     ThemeContrast="ThemeContrast.Light">
    <BarBrand>
        Books
    </BarBrand>
    <BarToggler />
    <BarMenu>
        <BarStart>
            <BarItem>
                <Button Color="Color.Success" Clicked="@(() => addBookModal.Show())">Add</Button>
            </BarItem>
            <BarItem>
                <Inline>
                    <Field Margin="Margin.Is3.OnX.OnTablet">
                        <Label>Import CSV</Label>
                    </Field>
                    <Field>
                        <InputFile OnChange="@OnInputFileChange" accept=".csv, .txt" multiple>Import CSV</InputFile>
                    </Field>
                </Inline>
            </BarItem>
            <BarItem>
                <Button Color="Color.Danger" Clicked="@DeleteAll">Delete all !</Button>
            </BarItem>
        </BarStart>
    </BarMenu>
</Bar>

<Container Fluid="true">
    <Tabs SelectedTab="@selectedPublicationType" SelectedTabChanged="OnSelectedTabChanged" Class="nav-fill">
        <Items>
            @foreach (var (type, count) in publicationTypes.Select(x => (x.Key, x.Value)).OrderByDescending(x => x.Value))
            {
                <Tab Name="@type">@type <Badge Color="Color.Primary">@count</Badge></Tab>
            }
        </Items>
        <Content>
            @foreach (var type in publicationTypes.OrderByDescending(x => x.Value).Select(x => x.Key))
            {
                <TabPanel Name="@type">
                    <DataGrid RowSelectable=@(_ => false)
                              TItem="BookListDTO"
                              Data="@books[type]"
                              ReadData="@((e) => OnReadData(e,type))"
                              TotalItems="@publicationTypes[type]"
                              ShowPager="true"
                              PagerPosition="DataGridPagerPosition.Top"
                              ShowPageSizes="true"
                              CurrentPage="@currentPage[type]"
                              PageChanged="(e) => currentPage[type] = e.Page">
                        <LoadingTemplate>
                            <div class="text-center">
                                <div class="spinner-border" role="status">
                                    <span class="sr-only">Loading...</span>
                                </div>
                            </div>
                        </LoadingTemplate>
                        <DataGridColumns>
                            <DataGridColumn TItem="BookListDTO" Field="@nameof(BookListDTO.DepartmentNumber)" Caption="Ident" Sortable="false">
                                <DisplayTemplate>
                                    <a href="@($"books/{context.DepartmentNumber}")">@context.DepartmentNumber</a>
                                    <div>@context.Depended</div>
                                    <AuthorizeView Policy="@LibrarianPolicy.NAME" Context="auth">
                                        <Check TValue="bool" Checked="context.StsLocal" Disabled="true" ReadOnly="true">
                                            StsLocal
                                        </Check>
                                        <Check TValue="bool" Checked="context.StsUK" Disabled="true" ReadOnly="true">
                                            StsUK
                                        </Check>
                                    </AuthorizeView>
                                </DisplayTemplate>
                            </DataGridColumn>
                            <DataGridColumn TItem="BookListDTO" Field="@nameof(BookListDTO.Name)" Caption="Name" Sortable="true">
                                <DisplayTemplate>
                                    <div>@context.Name</div>
                                    <div>
                                        <Icon Name="IconName.User" /> @string.Join(", ", context.CoAuthors.Prepend(context.Author))
                                    </div>
                                    <div><Keywords Words="context.Keywords" /></div>
                                    <AuthorizeView Context="Auth" Policy="@LibrarianPolicy.NAME">
                                        @{
                                            var numbers = new[] { ("Sys", context.SystemNumber), ("UK", context.FelNumber), ("ISBN", context.ISBNorISSN) };
                                            @string.Join(" / ", numbers.Select(x => $"{x.Item1}: {x.Item2.DashEmpty()}"))
                                        }

                                        @if (!string.IsNullOrEmpty(context.Note))
                                        {
                                            <Tooltip Text="@context.Note" Placement="Placement.Top">
                                                <Button Color="Color.Link" Size="Size.ExtraSmall" Disabled="true">Note</Button>
                                            </Tooltip>
                                        }
                                    </AuthorizeView>
                                </DisplayTemplate>
                            </DataGridColumn>
                            <DataGridColumn TItem="BookListDTO" Field="@nameof(BookListDTO.Author)" Caption="Main Author" Sortable="true" />
                            <DataGridColumn TItem="BookListDTO" Field="@nameof(BookListDTO.Publication)" Sortable="true" Caption="Publication">
                                <DisplayTemplate>
                                    @if (context.YearOfPublication.HasValue)
                                    {
                                        <div><Badge>Year: @context.YearOfPublication</Badge></div>
                                    }
                                    @if (context.Pages.HasValue)
                                    {
                                        <div><Badge>Pages: @context.Pages</Badge></div>
                                    }
                                    @if (context.Publication.HasValue)
                                    {
                                        <div><Badge>Edition: @context.Publication</Badge></div>
                                    }
                                </DisplayTemplate>
                            </DataGridColumn>
                            <DataGridColumn TItem="BookListDTO" Field="@nameof(BookListDTO.StatusName)" Caption="Available" Sortable="true">
                                <DisplayTemplate>
                                    <div>
                                        <Check TValue="bool" Checked="context.IsAvailable" Disabled="true" ReadOnly="true">
                                            <div class="@(context.IsAvailable ? "text-success" : "text-danger")">
                                                @(context.IsAvailable ? "Yes" : "No")
                                            </div>
                                        </Check>
                                        <div><Badge Color="Color.Light">@context.FormType</Badge></div>
                                        @if (context.StatusName != "Default")
                                        {
                                            <div><Badge Color="Color.Info">@context.StatusName</Badge></div>
                                        }
                                    </div>
                                </DisplayTemplate>
                            </DataGridColumn>
                        </DataGridColumns>
                    </DataGrid>
                </TabPanel>
            }
        </Content>
    </Tabs>
</Container>

<AddBookDialog @ref="addBookModal" />

<style>
    th {
        background: white;
        position: sticky;
        top: 0; /* Don't forget this, required for the stickiness */
        box-shadow: 0 2px 2px -1px rgba(0, 0, 0, 0.4);
        z-index: 10
    }
</style>

@code {
    private AddBookDialog addBookModal;

    private string selectedPublicationType;

    private Dictionary<string, int> publicationTypes = new Dictionary<string, int>();
    private Dictionary<string, List<BookListDTO>> books = new Dictionary<string, List<BookListDTO>>();
    private Dictionary<string, int> currentPage = new Dictionary<string, int>();

    protected override async Task OnInitializedAsync()
    {
        publicationTypes = await bookService.GetPublicationTypes();
        books = publicationTypes.ToDictionary(x => x.Key, _ => new List<BookListDTO>());
        currentPage = publicationTypes.ToDictionary(x => x.Key, _ => 1);
        if (publicationTypes.Any())
            selectedPublicationType = publicationTypes.Aggregate((l, r) => l.Value > r.Value ? l : r).Key;
    }

    private async Task DeleteAll()
    {
        await bookService.DeleteAll();
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
    }

    private async Task OnReadData(DataGridReadDataEventArgs<BookListDTO> e, string publicationType)
    {
        if (publicationType == selectedPublicationType || e.Page == 1)
        {
            var sortings = e.Columns.Where(x => x.Direction != SortDirection.None).ToDictionary(x => x.Field, x => x.Direction);
            var searches = e.Columns.Where(x => !string.IsNullOrEmpty(x.SearchValue)).ToDictionary(x => x.Field, x => x.SearchValue);

            books[publicationType] = await bookService.GetAll(e.Page, e.PageSize, publicationType);
            StateHasChanged();
        }
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        // 5 Megabytes = 5242880 Bytes
        foreach (var file in e.GetMultipleFiles())
        {
            await bookService.ImportCsv(file.OpenReadStream(5242880));
        }
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
    }

    private void OnSelectedTabChanged(string name)
    {
        selectedPublicationType = name;
    }
}
