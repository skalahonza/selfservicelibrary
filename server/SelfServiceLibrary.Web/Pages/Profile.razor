@page "/profile"
@page "/cards/{CardNumber}"
@attribute [Authorize]
@using SelfServiceLibrary.BL.DTO.Card
@using SelfServiceLibrary.BL.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@inject ICardService cardService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager


<Container Fluid="true">
    <h2>ID Cards</h2>
    <CardDeck>
        @foreach (var card in cards)
        {
            <Card ColumnSize="ColumnSize.Is3.OnDesktop.Is6.OnTablet.Is12.OnMobile">
                <CardBody>
                    <CardTitle Size="5">@card.Name</CardTitle>
                    <CardText>
                        @card.Number
                    </CardText>
                    <Button Clicked="() => RemoveCard(card)" Block="true" Size="Size.Small" Color="Color.Danger">Remove</Button>
                </CardBody>
            </Card>
        }
        <Card ColumnSize="ColumnSize.Is3.OnDesktop.Is6.OnTablet.Is12.OnMobile">
            <CardBody>
                <CardTitle Size="5">Add card</CardTitle>
                <CardText>
                    In order to add a card use the library kiosk.
                </CardText>
            </CardBody>
        </Card>
    </CardDeck>

    <!-- Add card modal -->
    <Modal @ref="addCardModal">
        <ModalContent IsCentered="true">
            <ModalHeader>
                <ModalTitle>Add ID card</ModalTitle>
                <CloseButton Clicked="() => HideModal(addCardModal)" />
            </ModalHeader>
            <ModalBody>
                <Validations Mode="ValidationMode.Auto" Model="@card" @ref="validations">
                    <Validation>
                        <Field>
                            <FieldLabel>Card number</FieldLabel>
                            <TextEdit @bind-Text="@card.Number" ReadOnly="true" Disabled="true">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation>
                        <Field>
                            <FieldLabel>Card name</FieldLabel>
                            <TextEdit Placeholder="CVUT, ISIC" @bind-Text="@card.Name">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation>
                        <Field>
                            <FieldLabel>Pin</FieldLabel>
                            <TextEdit Role="TextRole.Password" @bind-Text="@card.Pin">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation>
                        <Field>
                            <FieldLabel>Pin confirmation</FieldLabel>
                            <TextEdit Role="TextRole.Password" @bind-Text="@card.PinConfirmation">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="() => HideModal(addCardModal)">Close</Button>
                <Button Color="Color.Primary" Clicked="@AddCard">Save Changes</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>

    <!-- Delete card modal -->
    <Modal @ref="@deleteCardModal">
        <ModalContent IsCentered="true">
            <ModalHeader>
                <ModalTitle>Delete card</ModalTitle>
                <CloseButton Clicked="() => HideModal(deleteCardModal)" />
            </ModalHeader>
            <ModalBody>
                Are you sure you want to delete this card?
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="() => HideModal(deleteCardModal)">Close</Button>
                <Button Color="Color.Danger" Clicked="() => RemoveCardConfirmed(cardToDelete)">Delete!</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
</Container>

@code{
    private Modal addCardModal = new Modal();
    private Modal deleteCardModal = new Modal();
    private Validations validations = new Validations();

    private AddCardDTO card = new AddCardDTO();
    private List<CardListDTO> cards = new List<CardListDTO>();
    private CardListDTO cardToDelete = new CardListDTO();

    [CascadingParameter]
    protected MainLayout? Main { get; set; }

    [Parameter]
    public string? CardNumber { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        cards = await cardService.GetAll(state.User.Identity!.Name!);
        Main?.ChangeTitle("Profile");

        if (!string.IsNullOrEmpty(CardNumber))
        {
            ShowModal(addCardModal);
        }
    }

    private void ShowModal(Modal modal)
    {
        card = new AddCardDTO
        {
            Number = CardNumber ?? string.Empty
        };
        modal.Show();
    }

    private void HideModal(Modal modal)
    {
        modal.Hide();
    }

    private async Task AddCard()
    {
        if (validations.ValidateAll())
        {
            var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            await cardService.Add(state.User.Identity!.Name!, card);
            cards.Add(new CardListDTO
            {
                Name = card.Name,
                Number = card.Number
            });
            StateHasChanged();
            addCardModal.Hide();
            NavigationManager.NavigateTo("/profile");
        }
    }

    private void RemoveCard(CardListDTO card)
    {
        cardToDelete = card;
        deleteCardModal.Show();
    }

    private async Task RemoveCardConfirmed(CardListDTO card)
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        await cardService.Remove(state.User.Identity!.Name!, card.Number!);
        cards.Remove(card);
        deleteCardModal.Hide();
        cardToDelete = new CardListDTO();
        StateHasChanged();
    }
}