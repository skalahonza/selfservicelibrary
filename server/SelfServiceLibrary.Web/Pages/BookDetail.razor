@page "/books/{departmentNumber}"
@using SelfServiceLibrary.Web.Extensions
@using SelfServiceLibrary.BL.DTO.Book
@using SelfServiceLibrary.BL.DTO.BookStatus
@using SelfServiceLibrary.BL.DTO.Issue
@using SelfServiceLibrary.BL.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@using SelfServiceLibrary.Web.Policies
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IBookService bookService
@inject IBookLookupService bookLookupService
@inject IBookStatusService bookStatusService
@inject IIssueService issueService
@inject INotificationService notificationService
@inject IAuthorizationContext authorizationContext
@inject IMapper mapper

<Container Fluid="true">
    @if (book != null)
    {
        <Row>
            <Column ColumnSize="ColumnSize.IsFull.OnTablet.Is9.OnDesktop">
                <h1>Publication ID: <b>@DepartmentNumber</b></h1>
            </Column>
            <Column ColumnSize="ColumnSize.IsFull.OnTablet.Is3.OnDesktop">
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is2">
                        <b>IntStatus </b>
                    </FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is10">
                        <Select TValue="string" @bind-SelectedValue="@editBook.StatusName" ReadOnly="isReadonly" Disabled="isReadonly">
                            @foreach (var status in statuses)
                            {
                                <SelectItem Value="status.Name">@status.Name</SelectItem>
                            }
                        </Select>
                    </FieldBody>
                </Field>
            </Column>
        </Row>

        <AuthorizeView>
            <Divider />
        </AuthorizeView>

        <!-- Buttons panel wide screen-->
        <div class="clearfix d-none d-sm-block">
            <AuthorizeView Policy="@LibrarianPolicy.NAME">
                <Buttons class="float-left">
                    @if (edit)
                    {
                        <Button Clicked="Update" Color="Color.Success">Save</Button>
                        <Button Clicked="Cancel" Color="Color.Dark">Cancel</Button>
                    }
                    else
                    {
                        <Button Clicked="@(() => edit = true)" Color="Color.Primary">Edit</Button>
                        <Button Clicked="@(() => deleteBook.Show())" Color="Color.Danger">Delete</Button>
                        <Button Clicked="SendNewsletter" Disabled="newsletterSent || sendingNewsletter" Loading="sendingNewsletter" Color="Color.Light">Send newsletter</Button>
                    }
                </Buttons>
            </AuthorizeView>
            <AuthorizeView>
                <Buttons class="float-right">
                    <Button Disabled="@(!book.IsAvailable || !book.Status.CanBeBorrowed)" Color="Color.Success" Clicked="Borrow">Borrow</Button>
                    <AuthorizeView Policy="@LibrarianPolicy.NAME" Context="none">
                        <Authorized>
                            <Button Disabled="@(!book.IsAvailable || !book.Status.CanBeBorrowed)" Clicked="@(() => borrowToDialog.Show())" Color="Color.Warning">Borrow to</Button>
                            <Button Disabled="@(book.IsAvailable)" Clicked="Return" Color="Color.Primary">Return</Button>
                        </Authorized>
                        <NotAuthorized>
                            <Button Disabled="@(book.IsAvailable || context.User.Identity?.Name != book.CurrentIssueIssuedTo?.Username)" Color="Color.Primary" Clicked="Return">Return</Button>
                        </NotAuthorized>
                    </AuthorizeView>
                </Buttons>
            </AuthorizeView>
        </div>

        <!-- Buttons panel mobile -->
        <div class="d-block d-sm-none">
            <AuthorizeView Policy="@LibrarianPolicy.NAME">
                <Buttons>
                    @if (edit)
                    {
                        <Button Clicked="Update" Color="Color.Success">Save</Button>
                        <Button Clicked="Cancel" Color="Color.Dark">Cancel</Button>
                    }
                    else
                    {
                        <Button Clicked="@(() => edit = true)" Color="Color.Primary">Edit</Button>
                        <Button Clicked="@(() => deleteBook.Show())" Color="Color.Danger">Delete</Button>
                        <Button Clicked="SendNewsletter" Disabled="newsletterSent || sendingNewsletter" Loading="sendingNewsletter" Color="Color.Light">Send newsletter</Button>
                    }
                </Buttons>
            </AuthorizeView>
            <AuthorizeView>
                <Divider />
                <Buttons>
                    <Button Disabled="@(!book.IsAvailable || !book.Status.CanBeBorrowed)" Color="Color.Success" Clicked="Borrow">Borrow</Button>
                    <AuthorizeView Policy="@LibrarianPolicy.NAME" Context="none">
                        <Authorized>
                            <Button Disabled="@(!book.IsAvailable || !book.Status.CanBeBorrowed)" Clicked="@(() => borrowToDialog.Show())" Color="Color.Warning">Borrow to</Button>
                            <Button Disabled="@(book.IsAvailable)" Clicked="Return" Color="Color.Primary">Return</Button>
                        </Authorized>
                        <NotAuthorized>
                            <Button Disabled="@(book.IsAvailable || context.User.Identity?.Name != book.CurrentIssueIssuedTo?.Username)" Color="Color.Primary" Clicked="Return">Return</Button>
                        </NotAuthorized>
                    </AuthorizeView>
                </Buttons>
            </AuthorizeView>
        </div>

        <AuthorizeView>
            @if (!watchdogRegistered && book != null && !book.IsAvailable && context.User.Identity?.Name != book.CurrentIssueIssuedTo?.Username)
            {
                <!-- Watchdog panel -->
                <Divider />
                <Card Margin="Margin.Is2.FromTop" Background="Background.Dark" WhiteText="true">
                    <CardBody>
                        <CardText>
                            Someone else has borrowed the book. Interested in the book? Let the system notify you by email once the book becomes available again.
                        </CardText>
                        <Button Clicked="RegisterWatchDog" Color="Color.Primary">Notify me when the book becomes available</Button>
                    </CardBody>
                </Card>
            }

            <Divider />
        </AuthorizeView>

        <Row>
            <Column ColumnSize="ColumnSize.Is6.OnTablet">
                <RatingCard Average="book.ReviewsAvg.GetValueOrDefault()" Total="book.ReviewsCount" />
            </Column>
            <Column ColumnSize="ColumnSize.Is6.OnTablet" Class="text-center">
                @if (hasRead && !hasRated)
                {
                    <h2>Rate</h2>
                    <Buttons>
                        @foreach (var r in Enumerable.Range(1, 5))
                        {
                            <Button Active="@(rating == 2*r)" Clicked="@(() => Review(2*r))">@r <Icon Name="IconName.Star" /></Button>
                        }
                    </Buttons>
                }
            </Column>
        </Row>
        <Divider />

        <Validations @ref="validations" Mode="ValidationMode.Auto" ValidateOnLoad="false" Model="@editBook">
            <Fields>
                <Validation>
                    <Field ColumnSize="ColumnSize.IsFull.OnTablet.Is4.OnDesktop">
                        <FieldLabel>Publication type</FieldLabel>
                        <TextEdit @bind-Text="@editBook.PublicationType" ReadOnly="isReadonly" list="types">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                            <ChildContent>
                                <AuthorizeView Policy="@LibrarianPolicy.NAME">
                                    <FieldHelp>Druh publikace</FieldHelp>
                                </AuthorizeView>
                            </ChildContent>
                        </TextEdit>
                        <datalist id="types">
                            @foreach (var type in bookTypes)
                            {
                                <option>@type</option>
                            }
                        </datalist>
                    </Field>
                </Validation>
                <Validation>
                    <Field ColumnSize="ColumnSize.IsFull.OnTablet.Is4.OnDesktop">
                        <FieldLabel>Form type</FieldLabel>
                        <TextEdit @bind-Text="@editBook.FormType" ReadOnly="isReadonly" list="formTypes">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                            <ChildContent>
                                <AuthorizeView Policy="@LibrarianPolicy.NAME">
                                    <FieldHelp>Fyzický stav nebo podoba knihy</FieldHelp>
                                </AuthorizeView>
                            </ChildContent>
                        </TextEdit>
                        <datalist id="formTypes">
                            @foreach (var type in formTypes)
                            {
                                <option>@type</option>
                            }
                        </datalist>
                    </Field>
                </Validation>
                <Validation>
                    <Field ColumnSize="ColumnSize.IsFull.OnTablet.Is4.OnDesktop">
                        <FieldLabel>Storage</FieldLabel>
                        <TextEdit @bind-Text="@editBook.Storage" ReadOnly="isReadonly">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                            <ChildContent>
                                <AuthorizeView Policy="@LibrarianPolicy.NAME">
                                    <FieldHelp>Deponováno – Fyzická část knihovny, kde je publikace uložena.</FieldHelp>
                                </AuthorizeView>
                            </ChildContent>
                        </TextEdit>
                    </Field>
                </Validation>
            </Fields>

            <Divider />

            <Validation>
                <Field>
                    <FieldLabel>Name</FieldLabel>
                    <TextEdit @bind-Text="@editBook.Name" ReadOnly="isReadonly">
                        <Feedback>
                            <ValidationError />
                        </Feedback>
                        <ChildContent>
                            <AuthorizeView Policy="@LibrarianPolicy.NAME">
                                <FieldHelp>Název knihy</FieldHelp>
                            </AuthorizeView>
                        </ChildContent>
                    </TextEdit>
                </Field>
            </Validation>
            <Fields>
                <Validation>
                    <Field ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">
                        <FieldLabel>Author</FieldLabel>
                        <TextEdit @bind-Text="@editBook.Author" ReadOnly="isReadonly">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                            <ChildContent>
                                <AuthorizeView Policy="@LibrarianPolicy.NAME">
                                    <FieldHelp>První / hlavní autor, u sborníku většinou editor</FieldHelp>
                                </AuthorizeView>
                            </ChildContent>
                        </TextEdit>
                    </Field>
                </Validation>


                <Field ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">
                    <FieldLabel>Co-authors</FieldLabel>
                    @if (isReadonly)
                    {
                        <TextEdit Text="@string.Join(", ", editBook.CoAuthors)" ReadOnly="isReadonly" />
                    }
                    else
                    {
                        <TagsInput @bind-Tags="editBook.CoAuthors" ReadOnly="isReadonly" />
                    }
                    <AuthorizeView Policy="@LibrarianPolicy.NAME">
                        <FieldHelp>Spoluautoři</FieldHelp>
                    </AuthorizeView>
                </Field>
            </Fields>


            <Field>
                <FieldLabel>Keywords</FieldLabel>
                @if (isReadonly && editBook.Keywords.Count == 0)
                {
                    <TextEdit Text="" ReadOnly="isReadonly" />
                }
                else
                {
                    <TagsInput @bind-Tags="editBook.Keywords" ReadOnly="isReadonly" />
                }
                <AuthorizeView Policy="@LibrarianPolicy.NAME">
                    <FieldHelp>Klíčová slova</FieldHelp>
                </AuthorizeView>
            </Field>

            <Validation>
                <Field>
                    <FieldLabel>Conference</FieldLabel>
                    <TextEdit @bind-Text="@editBook.Conference" ReadOnly="isReadonly">
                        <Feedback>
                            <ValidationError />
                        </Feedback>
                        <ChildContent>
                            <AuthorizeView Policy="@LibrarianPolicy.NAME">
                                <FieldHelp>Konference – Z jaké konference je (sborník)</FieldHelp>
                            </AuthorizeView>
                        </ChildContent>
                    </TextEdit>
                </Field>
            </Validation>
            <Validation>
                <Field>
                    <FieldLabel>Note</FieldLabel>
                    <MemoEdit @bind-Text="@editBook.Note" ReadOnly="isReadonly" Rows="5">
                        <Feedback>
                            <ValidationError />
                        </Feedback>
                        <ChildContent>
                            <AuthorizeView Policy="@LibrarianPolicy.NAME">
                                <FieldHelp>Poznámka</FieldHelp>
                            </AuthorizeView>
                        </ChildContent>
                    </MemoEdit>
                </Field>
            </Validation>

            <Divider />

            <Fields>
                <Validation>
                    <Field ColumnSize="ColumnSize.IsFull.OnTablet.Is3.OnDesktop">
                        <FieldLabel>Year of publication</FieldLabel>
                        <NumericEdit TValue="int?" @bind-Value="@editBook.YearOfPublication" ReadOnly="isReadonly">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                            <ChildContent>
                                <AuthorizeView Policy="@LibrarianPolicy.NAME">
                                    <FieldHelp>Rok vydání publikace</FieldHelp>
                                </AuthorizeView>
                            </ChildContent>
                        </NumericEdit>
                    </Field>
                </Validation>
                <Validation>
                    <Field ColumnSize="ColumnSize.IsFull.OnTablet.Is3.OnDesktop">
                        <FieldLabel>Publication</FieldLabel>
                        <NumericEdit TValue="int?" @bind-Value="@editBook.Publication" ReadOnly="isReadonly">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                            <ChildContent>
                                <AuthorizeView Policy="@LibrarianPolicy.NAME">
                                    <FieldHelp>Pořadové číslo vydání (verze)</FieldHelp>
                                </AuthorizeView>
                            </ChildContent>
                        </NumericEdit>
                    </Field>
                </Validation>
                <Validation>
                    <Field ColumnSize="ColumnSize.IsFull.OnTablet.Is3.OnDesktop">
                        <FieldLabel>Pages</FieldLabel>
                        <NumericEdit TValue="int?" @bind-Value="@editBook.Pages" ReadOnly="isReadonly">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                            <ChildContent>
                                <AuthorizeView Policy="@LibrarianPolicy.NAME">
                                    <FieldHelp>Počet stran</FieldHelp>
                                </AuthorizeView>
                            </ChildContent>
                        </NumericEdit>
                    </Field>
                </Validation>
                <Validation>
                    <Field ColumnSize="ColumnSize.IsFull.OnTablet.Is3.OnDesktop">
                        <FieldLabel>Price</FieldLabel>
                        <Addons>
                            <Addon AddonType="AddonType.Start">
                                <AddonLabel>CZK</AddonLabel>
                            </Addon>
                            <Addon AddonType="AddonType.Body">
                                <NumericEdit TValue="decimal?" @bind-Value="@editBook.Price" ReadOnly="isReadonly">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>

                                </NumericEdit>
                            </Addon>
                        </Addons>
                        <AuthorizeView Policy="@LibrarianPolicy.NAME">
                            <FieldHelp>Cena v korunách českých</FieldHelp>
                        </AuthorizeView>
                    </Field>
                </Validation>
            </Fields>

            <Fields>
                <Validation>
                    <Field ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">
                        <FieldLabel>Magazine number</FieldLabel>
                        <TextEdit @bind-Text="@editBook.MagazineNumber" ReadOnly="isReadonly">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                            <ChildContent>
                                <AuthorizeView Policy="@LibrarianPolicy.NAME">
                                    <FieldHelp>Číslo časopisu</FieldHelp>
                                </AuthorizeView>
                            </ChildContent>
                        </TextEdit>
                    </Field>
                </Validation>
                <Validation>
                    <Field ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">
                        <FieldLabel>Magazine year</FieldLabel>
                        <NumericEdit TValue="int?" @bind-Value="@editBook.MagazineYear" ReadOnly="isReadonly">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                            <ChildContent>
                                <AuthorizeView Policy="@LibrarianPolicy.NAME">
                                    <FieldHelp>Ročník časopisu</FieldHelp>
                                </AuthorizeView>
                            </ChildContent>
                        </NumericEdit>
                    </Field>
                </Validation>
            </Fields>

            <Fields>
                <Validation>
                    <Field ColumnSize="ColumnSize.IsFull.OnTablet.Is4.OnDesktop">
                        <FieldLabel>ISBN/ISSN</FieldLabel>
                        <Addons>
                            <Addon AddonType="AddonType.Body">
                                <TextEdit @bind-Text="@editBook.ISBNorISSN" ReadOnly="isReadonly">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Addon>
                            <AuthorizeView Policy="@LibrarianPolicy.NAME">
                                <Addon AddonType="AddonType.End">
                                    <Button Color="Color.Primary" Clicked="Lookup" Disabled="isReadonly">Lookup</Button>
                                </Addon>
                            </AuthorizeView>
                        </Addons>
                    </Field>
                </Validation>
                <Validation>
                    <Field ColumnSize="ColumnSize.IsFull.OnTablet.Is4.OnDesktop">
                        <FieldLabel>Country of publication</FieldLabel>
                        <TextEdit @bind-Text="@editBook.CountryOfPublication" ReadOnly="isReadonly">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                            <ChildContent>
                                <AuthorizeView Policy="@LibrarianPolicy.NAME">
                                    <FieldHelp>Země kde byla publikace vydána</FieldHelp>
                                </AuthorizeView>
                            </ChildContent>
                        </TextEdit>
                    </Field>
                </Validation>
                <Validation>
                    <Field ColumnSize="ColumnSize.IsFull.OnTablet.Is4.OnDesktop">
                        <FieldLabel>Publisher</FieldLabel>
                        <TextEdit @bind-Text="@editBook.Publisher" ReadOnly="isReadonly">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                            <ChildContent>
                                <AuthorizeView Policy="@LibrarianPolicy.NAME">
                                    <FieldHelp>Kdo publikaci vydal (nakladatel)</FieldHelp>
                                </AuthorizeView>
                            </ChildContent>
                        </TextEdit>
                    </Field>
                </Validation>
            </Fields>

            @if (!book.IsAvailable)
            {
                <AuthorizeView Context="none">
                    <Divider />

                    <Fields>
                        <Field ColumnSize="ColumnSize.IsFull.OnTablet.Is4.OnDesktop">
                            <FieldLabel>Issued to</FieldLabel>
                            <TextEdit Text="@book.CurrentIssueIssuedTo?.ToString()" ReadOnly="true" />
                            <AuthorizeView Policy="@LibrarianPolicy.NAME">
                                <FieldHelp>Zapůjčeno komu</FieldHelp>
                            </AuthorizeView>
                        </Field>
                        <Field ColumnSize="ColumnSize.IsFull.OnTablet.Is4.OnDesktop">
                            <FieldLabel>Issued since</FieldLabel>
                            <DateEdit TValue="DateTime?" Date="@book.CurrentIssueIssueDate" InputMode="DateInputMode.DateTime" ReadOnly="true" />
                            <AuthorizeView Policy="@LibrarianPolicy.NAME">
                                <FieldHelp>Zapůjčeno od</FieldHelp>
                            </AuthorizeView>
                        </Field>
                        <Field ColumnSize="ColumnSize.IsFull.OnTablet.Is4.OnDesktop">
                            <FieldLabel>Issued till</FieldLabel>
                            <DateEdit TValue="DateTime?" Date="@book.CurrentIssueExpiryDate" InputMode="DateInputMode.DateTime" ReadOnly="true" />
                            <AuthorizeView Policy="@LibrarianPolicy.NAME">
                                <FieldHelp>Zapůjčeno do</FieldHelp>
                            </AuthorizeView>
                        </Field>
                    </Fields>
                </AuthorizeView>
            }

            <AuthorizeView Policy="@LibrarianPolicy.NAME">
                <Divider />

                <Fields>
                    <Field ColumnSize="ColumnSize.IsFull.OnTablet.Is3.OnDesktop">
                        <FieldLabel>Department number</FieldLabel>
                        <TextEdit @bind-Text="@book.DepartmentNumber" ReadOnly="true">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                            <ChildContent>
                                <FieldHelp>Evidenční číslo oddělení</FieldHelp>
                            </ChildContent>
                        </TextEdit>
                    </Field>

                    <Validation>
                        <Field ColumnSize="ColumnSize.IsFull.OnTablet.Is3.OnDesktop">
                            <FieldLabel>System number</FieldLabel>
                            <TextEdit @bind-Text="@editBook.SystemNumber" ReadOnly="isReadonly">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                                <ChildContent>
                                    <FieldHelp>Systémové číslo</FieldHelp>
                                </ChildContent>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation>
                        <Field ColumnSize="ColumnSize.IsFull.OnTablet.Is3.OnDesktop">
                            <FieldLabel>FEL number</FieldLabel>
                            <TextEdit @bind-Text="@editBook.FelNumber" ReadOnly="isReadonly">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                                <ChildContent>
                                    <FieldHelp>Evidenční číslo FEL</FieldHelp>
                                </ChildContent>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation>
                        <Field ColumnSize="ColumnSize.IsFull.OnTablet.Is3.OnDesktop">
                            <FieldLabel>Bar code</FieldLabel>
                            <TextEdit @bind-Text="@editBook.BarCode" ReadOnly="isReadonly">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                                <ChildContent>
                                    <FieldHelp>Čárový kód</FieldHelp>
                                </ChildContent>
                            </TextEdit>
                        </Field>
                    </Validation>
                </Fields>

                <Divider />
                <Fields>
                    <Field ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">
                        <FieldLabel>Entered at</FieldLabel>
                        <DateEdit TValue="DateTime?" Date="@book.Entered" InputMode="DateInputMode.DateTime" ReadOnly="true" />
                        <FieldHelp>Vloženo</FieldHelp>
                    </Field>
                    <Field ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">
                        <FieldLabel>Entered by</FieldLabel>
                        <TextEdit Text="@book.EnteredBy?.ToString()" ReadOnly="true" />
                        <FieldHelp>Vloženo kým</FieldHelp>
                    </Field>
                </Fields>
                <Fields>
                    <Field ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">
                        <Check TValue="bool" @bind-Checked="@editBook.StsLocal" ReadOnly="isReadonly" Disabled="isReadonly">StsCheck</Check>
                    </Field>
                    <Field ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">
                        <Check TValue="bool" @bind-Checked="@editBook.StsUK" ReadOnly="isReadonly" Disabled="isReadonly">StsUK</Check>
                    </Field>
                </Fields>
                <Fields>
                    <Validation>
                        <Field >
                            <FieldLabel>NFC code</FieldLabel>
                            <TextEdit @bind-Text="@editBook.NFCIdent" class="nfc-text" ReadOnly="isReadonly">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                </Fields>

                <Divider />
                <h3>History</h3>

                <DataGrid RowSelectable=@(_ => false)
                          TItem="IssueListDTO"
                          Data="@issues"
                          Responsive="true"
                          ShowPager="true"
                          PagerPosition="DataGridPagerPosition.Bottom"
                          PageSize="10">
                    <DataGridColumn TItem="IssueListDTO" Field="@nameof(IssueListDTO.IssuedTo)" Caption="Issued to" Sortable="true" />
                    <DataGridColumn TItem="IssueListDTO" Field="@nameof(IssueListDTO.IssuedBy)" Caption="Issued by" Sortable="true" />
                    <DataGridColumn TItem="IssueListDTO" Field="@nameof(IssueListDTO.ReturnedBy)" Caption="Returned by" Sortable="true" />
                    <DataGridDateColumn TItem="IssueListDTO" Field="@nameof(IssueListDTO.IssueDate)" DisplayFormat="{0:dd.MM.yyyy}" Caption="Issue date" Sortable="true" />
                    <DataGridDateColumn TItem="IssueListDTO" Field="@nameof(IssueListDTO.ExpiryDate)" DisplayFormat="{0:dd.MM.yyyy}" Caption="Expiry date" Sortable="true" />
                    <DataGridDateColumn TItem="IssueListDTO" Field="@nameof(IssueListDTO.ReturnDate)" DisplayFormat="{0:dd.MM.yyyy}" Caption="Return date" Sortable="true" />
                </DataGrid>
            </AuthorizeView>
        </Validations>
    }
    else
    {
        <div>
            Book not found
        </div>
    }
</Container>

<SnackbarStack @ref="snackbarStack" Location="SnackbarStackLocation.Center" />
<DeleteDialog @ref="deleteBook" Title="Delete book" Text="Are you sure you want to delete this book?" Confirmed="DeleteConfirmed" />
<BorrowToDialog @ref="borrowToDialog" DepartmentNumber="@DepartmentNumber" OnBorrowed="Borrowed" />


@code {
    SnackbarStack snackbarStack = new SnackbarStack();
    Validations validations = new Validations();
    DeleteDialog deleteBook = new DeleteDialog();
    BorrowToDialog borrowToDialog = new BorrowToDialog();

    private bool edit;
    private bool isReadonly => !edit;
    private BookDetailDTO? book = new BookDetailDTO();
    private BookEditDTO editBook = new BookEditDTO();
    private List<IssueListDTO> issues = new List<IssueListDTO>();
    private List<BookStatusListDTO> statuses = new List<BookStatusListDTO>();
    private List<string> bookTypes = new List<string>();
    private List<string> formTypes = new List<string>();
    private int rating;
    private bool hasRead;
    private bool hasRated;
    private bool sendingNewsletter;
    private bool newsletterSent;
    private bool watchdogRegistered = true; // prevents flashing of the card

#pragma warning disable CS8618 // URL Template match
    [Parameter]
    public string DepartmentNumber { get; set; }
#pragma warning restore CS8618 // URL Template match

    [CascadingParameter]
    protected MainLayout Main { get; set; } = new MainLayout();

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var roles = state.User.Claims.GetRoles();

        book = await bookService.GetDetail(DepartmentNumber);
        if (book != null)
        {
            formTypes = (await bookService.GetFormTypes()).OrderByDescending(x => x.Value).Select(x => x.Key).ToList();
            bookTypes = (await bookService.GetPublicationTypes(roles)).OrderByDescending(x => x.Value).Select(x => x.Key).ToList();
            editBook = mapper.Map<BookEditDTO>(book);
            issues = await issueService.GetBookIssues(DepartmentNumber);
            statuses = await bookStatusService.GetAll();

            if (state.User.Identity?.Name != null)
            {
                hasRead = await bookService.HasRead(DepartmentNumber, state.User.Identity.Name);
                hasRated = await bookService.HasReviewed(DepartmentNumber, state.User.Identity.Name);
                watchdogRegistered = await bookService.HasWatchdog(DepartmentNumber, state.User.Identity.Name);
            }
        }
        Main?.ChangeTitle("Item detail");
    }

    private async Task RegisterWatchDog()
    {
        if (book != null)
        {
            await bookService.RegisterWatchdog(DepartmentNumber);
            watchdogRegistered = true;
            await snackbarStack.PushAsync("An email will arrive into your mailbox once the book becomes available.", title: "Watchdog registered", color: SnackbarColor.Success);
        }
    }

    private async Task SendNewsletter()
    {
        if (book != null)
        {
            sendingNewsletter = true;
            StateHasChanged();
            await notificationService.SendNewsletter(book);
            sendingNewsletter = false;
            newsletterSent = true;
            await snackbarStack.PushAsync("An email that the book is available was sent.", title: "Sent", color: SnackbarColor.Success);
        }
    }

    private async Task Review(int value)
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (state.User.Identity?.Name != null)
        {
            await bookService.AddOrUpdateReview(new BookReviewDTO
            {
                Username = state.User.Identity.Name,
                DepartmentNumber = DepartmentNumber,
                Value = value,
            });
            rating = value;
            await snackbarStack.PushAsync("Book rated successfully.", title: "Rated", color: SnackbarColor.Success);
            book = await bookService.GetDetail(DepartmentNumber);
        }
    }

    private async Task Lookup()
    {
        if (book != null)
        {
            if (await bookLookupService.FillData(book))
            {
                editBook = mapper.Map<BookEditDTO>(book);
                await snackbarStack.PushAsync("Data filled from Google Books.", color: SnackbarColor.Success, title: "Filled");
            }
            else
            {
                await snackbarStack.PushAsync("Unable to fill data from Google Books.", color: SnackbarColor.Danger, title: "Error");
            }
        }
    }

    private async Task Borrowed()
    {
        book = await bookService.GetDetail(DepartmentNumber);
        issues = await issueService.GetBookIssues(DepartmentNumber);
        await snackbarStack.PushAsync("Borrowed.", SnackbarColor.Success);
    }

    private async Task Borrow()
    {
        var details = new IssueCreateDTO
        {
            DepartmentNumber = DepartmentNumber,
            ExpiryDate = DateTime.UtcNow.AddDays(30)
        };

        if (await Main.ExecuteSafe(() => issueService.Borrow(details)))
        {
            await Borrowed();
        }
    }

    private async Task Return()
    {
        if (book != null && book.CurrentIssueId != null)
        {
            if (await Main.ExecuteSafe(() => issueService.Return(book.CurrentIssueId)))
            {
                book = await bookService.GetDetail(DepartmentNumber);
                issues = await issueService.GetBookIssues(DepartmentNumber);
                await snackbarStack.PushAsync("Book returned.", SnackbarColor.Success);
            }
        }
    }

    private async Task Update()
    {
        if (validations.ValidateAll())
        {
            await bookService.Update(DepartmentNumber, editBook);
            book = await bookService.GetDetail(DepartmentNumber);
            editBook = mapper.Map<BookEditDTO>(book!);
            edit = false;
            validations.ClearAll();
        }
    }

    private async Task DeleteConfirmed()
    {
        if (await Main.ExecuteSafe(() => bookService.Delete(DepartmentNumber)))
        {
            await snackbarStack.PushAsync("Book deleted.", SnackbarColor.Success);
            book = null;
        }
    }

    private void Cancel()
    {
        validations.ClearAll();
        editBook = mapper.Map<BookEditDTO>(book!);
        edit = false;
    }
}