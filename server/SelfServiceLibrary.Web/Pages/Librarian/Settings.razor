@page "/settings"

@attribute [Authorize(Policy = LibrarianPolicy.NAME)]
@using SelfServiceLibrary.Web.Filters
@using SelfServiceLibrary.Web.Policies
@using SelfServiceLibrary.DAL.Entities
@using SelfServiceLibrary.BL.Services
@using SelfServiceLibrary.BL.Interfaces
@using SelfServiceLibrary.BL.DTO.BookStatus
@using Microsoft.AspNetCore.Components.Authorization
@using System.Web
@inject BookService bookService
@inject BookStatusService bookStatusService
@inject IMapper _mapper
@inject AuthenticationStateProvider AuthenticationStateProvider


<Container Fluid="true">
    <Card Margin="Margin.Is4.OnY">
        <CardHeader>
            <Row>
                <Column ColumnSize="ColumnSize.Is11">Book statuses</Column>
                <Switch TValue="bool" @bind-Checked="delete" Color="Color.Danger" ColumnSize="ColumnSize.Is1">Delete</Switch>
            </Row>
        </CardHeader>
        <CardBody>
            <DataGrid TItem="BookStatusListDTO"
                      Data="@statuses"
                      Responsive="true"
                      RowSelectable=@(_ => false)
                      Editable="true"
                      SortMode="DataGridSortMode.Multiple"
                      EditMode="DataGridEditMode.Inline"
                      ShowPager="true"
                      PageSize="5"
                      RowInserted="@OnRowInserted"
                      RowUpdated="@OnRowUpdated"
                      RowRemoved="@OnRowRemoved">
                <DataGridColumn TItem="BookStatusListDTO" Field="@nameof(BookStatusListDTO.Name)" Caption="Status" Editable="true" CellsEditableOnEditCommand="false" CellsEditableOnNewCommand="true" />
                <DataGridCheckColumn TItem="BookStatusListDTO" Field="@nameof(BookStatusListDTO.CanBeBorrowed)" Caption="Borrow" Editable="true" Filterable="false">
                    <DisplayTemplate>
                        <Check TValue="bool" Checked="context.CanBeBorrowed" Disabled="true" ReadOnly="true" />
                    </DisplayTemplate>
                </DataGridCheckColumn>
                <DataGridCheckColumn TItem="BookStatusListDTO" Field="@nameof(BookStatusListDTO.IsVisible)" Caption="Visible" Editable="true" Filterable="false">
                    <DisplayTemplate>
                        <Check TValue="bool" Checked="context.IsVisible" Disabled="true" ReadOnly="true" />
                    </DisplayTemplate>
                </DataGridCheckColumn>
                <DataGridCommandColumn TItem="BookStatusListDTO" Width="170px">
                    <NewCommandTemplate>
                        <Button Color="Color.Success" Clicked="@context.Clicked">+</Button>
                    </NewCommandTemplate>
                    <EditCommandTemplate>
                        <Button Color="Color.Primary" Clicked="@context.Clicked"><Icon Name="IconName.Pen" /></Button>
                    </EditCommandTemplate>
                    <SaveCommandTemplate>
                        <Button Color="Color.Success" Clicked="@context.Clicked"><Icon Name="IconName.Save" /></Button>
                    </SaveCommandTemplate>
                    <DeleteCommandTemplate>
                        <Button Color="Color.Danger" Clicked="@context.Clicked" Disabled="!delete"><Icon Name="IconName.Delete" /></Button>
                    </DeleteCommandTemplate>
                    <CancelCommandTemplate>
                        <Button Color="Color.Secondary" Clicked="@context.Clicked"><Icon Name="IconName.Stop" /> Cancel</Button>
                    </CancelCommandTemplate>
                </DataGridCommandColumn>
            </DataGrid>
        </CardBody>
    </Card>

    <Card Margin="Margin.Is4.OnY">
        <CardHeader>
            <Row>
                <Column ColumnSize="ColumnSize.Is11">Books</Column>
                <Switch TValue="bool" @bind-Checked="delete" Color="Color.Danger" ColumnSize="ColumnSize.Is1">Delete</Switch>
            </Row>
        </CardHeader>
        <CardBody>
            <Buttons Role="ButtonsRole.Toolbar">
                <Button Color="Color.Success" Clicked="@(() => addBookModal?.Show())">Add</Button>
                <Button Color="Color.Info" Clicked="@(() => importBooksModal?.Show())">Import CSV</Button>
            </Buttons>
            <Divider />

            <BookFilter Filter="filter" FilterChanged="FilerChagned"/>
            <Text>Total items: @totalItems</Text>
            <Button Color="Color.Primary" Type="ButtonType.Link" To="@($"/csv/books{CsvQueryFilter()}")" Target="Target.Blank">Export CSV</Button>
            <Divider />
            <Dropdown Disabled="!delete">
                <DropdownToggle Color="Color.Danger" ToggleIconVisible="false">
                    Delete all!
                </DropdownToggle>
                <DropdownMenu>
                    <DropdownItem Clicked="DeleteAll">Yes, I am sure</DropdownItem>
                </DropdownMenu>
            </Dropdown>
        </CardBody>
    </Card>
</Container>

<SnackbarStack @ref="snackbarStack" Location="SnackbarStackLocation.Right" />
<AddBookDialog @ref="addBookModal" />
<ImportBooksDialog @ref="importBooksModal" />

<style>
    .custom-file-label {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
</style>

@code {
    private bool delete;
    private SnackbarStack snackbarStack = new SnackbarStack();
    private AddBookDialog? addBookModal;
    private ImportBooksDialog? importBooksModal;
    private List<BookStatusListDTO> statuses = new List<BookStatusListDTO>();
    private BooksFilter filter = new BooksFilter();
    private int totalItems = 0;

    [CascadingParameter]
    protected MainLayout? Main { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Reload();
        totalItems = await bookService.GetTotalCount(filter);
        Main?.ChangeTitle("Settings");
    }

    private async Task Reload()
    {
        statuses = await bookStatusService.GetAll();
        var defaultStatus = statuses.FirstOrDefault(x => x.Name == BookStatus.DefaultName);
        if (defaultStatus != null)
            statuses.Remove(defaultStatus);
    }

    private async Task DeleteAll()
    {
        await bookService.DeleteAll();
        await snackbarStack.PushAsync("All books deleted.", SnackbarColor.Success);
        delete = false;
    }

    private async Task OnRowInserted(SavedRowItem<BookStatusListDTO, Dictionary<string, object>> e)
    {
        var result = await bookStatusService.Create(_mapper.Map<BookStatusCreateDTO>(e.Item));
        await result.Match(
                ok => snackbarStack.PushAsync("Book status created.", SnackbarColor.Success),
                async alreadyExisted =>
                {
                    await Reload();
                    await snackbarStack.PushAsync("Such book status already exists.", SnackbarColor.Danger);
                }
            );
    }

    private async Task OnRowUpdated(SavedRowItem<BookStatusListDTO, Dictionary<string, object>> e)
    {
        await bookStatusService.Update(e.Item.Name ?? string.Empty, _mapper.Map<BookStatusUpdateDTO>(e.Item));
    }

    private async Task OnRowRemoved(BookStatusListDTO model)
    {
        await bookStatusService.Remove(model.Name ?? string.Empty);
    }

    private async Task FilerChagned(BooksFilter filter)
    {
        this.filter = filter;
        totalItems = await bookService.GetTotalCount(filter);
    }

    private string CsvQueryFilter()
    {
        var queryString
            = HttpUtility.ParseQueryString(string.Empty);

        if(!string.IsNullOrEmpty(filter.Departmentnumber))
            queryString.Add(nameof(filter.Departmentnumber), filter.Departmentnumber);

        if (!string.IsNullOrEmpty(filter.Name))
            queryString.Add(nameof(filter.Name), filter.Name);

        if (!string.IsNullOrEmpty(filter.Author))
            queryString.Add(nameof(filter.Author), filter.Author);

        if (!string.IsNullOrEmpty(filter.Status))
            queryString.Add(nameof(filter.Status), filter.Status);

        if (filter.IsAvailable.HasValue)
            queryString.Add(nameof(filter.IsAvailable), filter.IsAvailable.Value.ToString());

        return queryString.Count == 0
            ? string.Empty
            : $"?{queryString}";
    }
}
