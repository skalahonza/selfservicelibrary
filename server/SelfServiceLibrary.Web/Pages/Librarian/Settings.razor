@page "/settings"
@attribute [Authorize(Policy = LibrarianPolicy.NAME)]
@using SelfServiceLibrary.Web.Policies
@using SelfServiceLibrary.DAL.Entities
@using SelfServiceLibrary.BL.Services
@using SelfServiceLibrary.BL.Interfaces
@using SelfServiceLibrary.BL.DTO.BookStatus
@using Microsoft.AspNetCore.Components.Authorization
@inject BookStatusService _bookStatusService
@inject IMapper _mapper
@inject AuthenticationStateProvider AuthenticationStateProvider

<Bar Breakpoint="Breakpoint.Desktop"
     Background="Background.Light"
     ThemeContrast="ThemeContrast.Light">
    <BarBrand>
        Settings
    </BarBrand>
    <BarToggler />
</Bar>

<Container Fluid="true">
    <Card Margin="Margin.Is4.OnY">
        <CardHeader>
            <Row>
                <Column ColumnSize="ColumnSize.Is11">Book statuses</Column>
                <Switch TValue="bool" @bind-Checked="delete" Color="Color.Danger" ColumnSize="ColumnSize.Is1">Delete</Switch>
            </Row>
        </CardHeader>
        <CardBody>
            <DataGrid TItem="BookStatusListDTO"
                      Data="@statuses"
                      Responsive="true"
                      RowSelectable=@(_ => false)
                      Editable="true"
                      SortMode="DataGridSortMode.Multiple"
                      EditMode="DataGridEditMode.Inline"
                      ShowPager="true"
                      PageSize="5"
                      RowInserted="@OnRowInserted"
                      RowUpdated="@OnRowUpdated"
                      RowRemoved="@OnRowRemoved">
                <DataGridColumn TItem="BookStatusListDTO" Field="@nameof(BookStatusListDTO.Name)" Caption="Status" Editable="true" CellsEditableOnEditCommand="false" CellsEditableOnNewCommand="true" />
                <DataGridCheckColumn TItem="BookStatusListDTO" Field="@nameof(BookStatusListDTO.CanBeBorrowed)" Caption="Borrow" Editable="true" Filterable="false">
                    <DisplayTemplate>
                        <Check TValue="bool" Checked="context.CanBeBorrowed" Disabled="true" ReadOnly="true" />
                    </DisplayTemplate>
                </DataGridCheckColumn>
                <DataGridCheckColumn TItem="BookStatusListDTO" Field="@nameof(BookStatusListDTO.IsVissible)" Caption="Visible" Editable="true" Filterable="false">
                    <DisplayTemplate>
                        <Check TValue="bool" Checked="context.IsVissible" Disabled="true" ReadOnly="true" />
                    </DisplayTemplate>
                </DataGridCheckColumn>
                <DataGridCommandColumn TItem="BookStatusListDTO" Width="170px">
                    <NewCommandTemplate>
                        <Button Color="Color.Success" Clicked="@context.Clicked">+</Button>
                    </NewCommandTemplate>
                    <EditCommandTemplate>
                        <Button Color="Color.Primary" Clicked="@context.Clicked"><Icon Name="IconName.Pen" /> Edit</Button>
                    </EditCommandTemplate>
                    <SaveCommandTemplate>
                        <Button Color="Color.Primary" Clicked="@context.Clicked">Save</Button>
                    </SaveCommandTemplate>
                    <DeleteCommandTemplate>
                        <Button Color="Color.Danger" Clicked="@context.Clicked" Disabled="!delete"><Icon Name="IconName.Delete" /> Delete</Button>
                    </DeleteCommandTemplate>
                    <CancelCommandTemplate>
                        <Button Color="Color.Secondary" Clicked="@context.Clicked">Cancel</Button>
                    </CancelCommandTemplate>
                </DataGridCommandColumn>
            </DataGrid>
        </CardBody>
    </Card>

    <Card Margin="Margin.Is4.OnY">
        <CardHeader>
            Books
        </CardHeader>
        <CardBody>
            <Button Color="Color.Success" Clicked="@(() => addBookModal?.Show())">Add</Button>
            <Button Color="Color.Info">Import CSV</Button>
            <Button Color="Color.Primary">Export CSV</Button>
        </CardBody>
    </Card>

    <Card Margin="Margin.Is4.OnY">
        <CardHeader>
            Issues
        </CardHeader>
        <CardBody>
            <Button Color="Color.Primary">Export CSV</Button>
        </CardBody>
    </Card>
</Container>

<SnackbarStack @ref="snackbarStack" Location="SnackbarStackLocation.Right" />
<AddBookDialog @ref="addBookModal" />

@code {
    private bool delete;
    private SnackbarStack snackbarStack = new SnackbarStack();
    private AddBookDialog? addBookModal;
    private List<BookStatusListDTO> statuses = new List<BookStatusListDTO>();

    protected override Task OnInitializedAsync() =>
            Reload();

    private async Task Reload()
    {
        statuses = await _bookStatusService.GetAll();
        var defaultStatus = statuses.FirstOrDefault(x => x.Name == BookStatus.DefaultName);
        if (defaultStatus != null)
            statuses.Remove(defaultStatus);
    }


    private async Task OnRowInserted(SavedRowItem<BookStatusListDTO, Dictionary<string, object>> e)
    {
        var result = await _bookStatusService.Create(_mapper.Map<BookStatusCreateDTO>(e.Item));
        await result.Match(
                ok => snackbarStack.PushAsync("Book status created.", SnackbarColor.Success),
                async alreadyExisted =>
                {
                    await Reload();
                    await snackbarStack.PushAsync("Such book status already exists.", SnackbarColor.Danger);
                }
            );
    }

    private async Task OnRowUpdated(SavedRowItem<BookStatusListDTO, Dictionary<string, object>> e)
    {
        await _bookStatusService.Update(e.Item.Name ?? string.Empty, _mapper.Map<BookStatusUpdateDTO>(e.Item));
    }

    private async Task OnRowRemoved(BookStatusListDTO model)
    {
        await _bookStatusService.Remove(model.Name ?? string.Empty);
    }
}
