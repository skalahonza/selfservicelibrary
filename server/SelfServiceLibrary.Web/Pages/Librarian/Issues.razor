@page "/issues"
@attribute [Authorize(Policy = LibrarianPolicy.NAME)]

@using SelfServiceLibrary.Web.Policies
@using SelfServiceLibrary.BL.Services
@using SelfServiceLibrary.BL.DTO.Issue
@inject IssueService issueService

<Container Fluid="true">
    <DataGrid RowSelectable=@(_ => false)
              TItem="IssueListlDTO"
              Data="@issues"
              ReadData="@OnReadData"
              TotalItems="@totalIssues"
              ShowPager="true"
              PagerPosition="DataGridPagerPosition.Bottom"
              ShowPageSizes="true">
        <DataGridColumn TItem="IssueListlDTO" Field="@nameof(IssueListlDTO.DepartmentNumber)" Caption="Ident" Sortable="false">
            <DisplayTemplate>
                <a href="@($"books/{context.DepartmentNumber}")">@context.DepartmentNumber</a>
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="IssueListlDTO" Field="@nameof(IssueListlDTO.BookName)" Caption="Name" Sortable="true" />
        <DataGridColumn TItem="IssueListlDTO" Field="@nameof(IssueListlDTO.IssuedTo)" Caption="Issued to" Sortable="true" />
        <DataGridDateColumn TItem="IssueListlDTO" Field="@nameof(IssueListlDTO.IssueDate)" DisplayFormat="{0:dd.MM.yyyy}" Caption="Issue date" Sortable="true" />
        <DataGridDateColumn TItem="IssueListlDTO" Field="@nameof(IssueListlDTO.ExpiryDate)" DisplayFormat="{0:dd.MM.yyyy}" Caption="Expiry date" Sortable="true" />
        <DataGridDateColumn TItem="IssueListlDTO" Field="@nameof(IssueListlDTO.ReturnDate)" DisplayFormat="{0:dd.MM.yyyy}" Caption="Return date" Sortable="true" />
        <DataGridCheckColumn TItem="IssueListlDTO" Field="@nameof(IssueListlDTO.IsReturned)" Caption="Reutrned" Sortable="true">
            <DisplayTemplate>
                <Check TValue="bool" Checked="context.IsReturned" Disabled="true" ReadOnly="true" />
            </DisplayTemplate>
        </DataGridCheckColumn>
    </DataGrid>
</Container>

@code {
    private List<IssueListlDTO> issues = new List<IssueListlDTO>();
    private int? totalIssues;

    [CascadingParameter]
    protected MainLayout? Main { get; set; }

    protected override async Task OnInitializedAsync()
    {
        totalIssues = (int)await issueService.GetTotalCount();
        Main?.ChangeTitle("Issues");
    }

    private async Task OnReadData(DataGridReadDataEventArgs<IssueListlDTO> e)
    {
        var sortings = e.Columns.Where(x => x.Direction != SortDirection.None).ToDictionary(x => x.Field, x => x.Direction);
        var searches = e.Columns.Where(x => !string.IsNullOrEmpty(x.SearchValue)).ToDictionary(x => x.Field, x => x.SearchValue);

        issues = await issueService.GetAll(e.Page, e.PageSize);
        StateHasChanged();
    }
}
