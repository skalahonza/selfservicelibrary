@page "/issues"
@attribute [Authorize(Policy = LibrarianPolicy.NAME)]

@using SelfServiceLibrary.Web.Extensions
@using SelfServiceLibrary.Web.Filters
@using SelfServiceLibrary.Web.Policies
@using SelfServiceLibrary.BL.Interfaces
@using SelfServiceLibrary.BL.DTO.Issue
@using System.ComponentModel
@inject IIssueService issueService

<Container Fluid="true">
    <IssueFilter Filter="filter" FilterChanged="FilterChanged" />
    <Button Margin="Margin.Is2.OnY" Color="Color.Primary" Clicked="@(() => filterVisible = !filterVisible)">
        Filter <Icon Name="IconName.Filter" />
    </Button>
    @if (filterVisible)
    {
        <Button Margin="Margin.Is2.OnY" Color="Color.Warning" Clicked="ClearFilter">Clear Filter</Button>
    }

    @if (filterVisible)
    {
        <Divider />
        <IssueFilterAdvanced Filter="filter" FilterChanged="FilterChanged" />
        <Divider />
    }

    <DataGrid @ref="grid"
              RowSelectable=@(_ => false)
              TItem="IssueListlDTO"
              Data="@issues"
              ReadData="@OnReadData"
              TotalItems="@totalIssues"
              ShowPager="true"
              PagerPosition="DataGridPagerPosition.Bottom"
              ShowPageSizes="true"
              Responsive="true">
        <LoadingTemplate>
            <Loading />
        </LoadingTemplate>
        <DataGridColumns>
            <DataGridColumn TItem="IssueListlDTO" Field="@nameof(IssueListlDTO.BookName)" Caption="Item" Sortable="true">
                <DisplayTemplate>
                    <!-- Full name specified due to https://github.com/dotnet/aspnetcore/issues/18685 -->
                    <Blazorise.Link To="@($"/books/{context.DepartmentNumber}")">@context.BookName</Blazorise.Link>
                    <div><Badge Color="Color.Secondary">@context.DepartmentNumber</Badge></div>
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="IssueListlDTO" Field="@nameof(IssueListlDTO.IssuedTo)" Caption="Issued to" Sortable="true" />
            <DataGridColumn TItem="IssueListlDTO" Field="@nameof(IssueListlDTO.IssuedBy)" Caption="Issued by" Sortable="true" />
            <DataGridColumn TItem="IssueListlDTO" Field="@nameof(IssueListlDTO.ReturnedBy)" Caption="Returned by" Sortable="true" />
            <DataGridDateColumn TItem="IssueListlDTO" Field="@nameof(IssueListlDTO.IssueDate)" DisplayFormat="{0:dd.MM.yyyy}" Caption="Issue date" Sortable="true" />
            <DataGridDateColumn TItem="IssueListlDTO" Field="@nameof(IssueListlDTO.ExpiryDate)" DisplayFormat="{0:dd.MM.yyyy}" Caption="Expiry date" Sortable="true" />
            <DataGridDateColumn TItem="IssueListlDTO" Field="@nameof(IssueListlDTO.ReturnDate)" DisplayFormat="{0:dd.MM.yyyy}" Caption="Return date" Sortable="true" />
            <DataGridCheckColumn TItem="IssueListlDTO" Field="@nameof(IssueListlDTO.IsReturned)" Caption="Reutrned" Sortable="true">
                <DisplayTemplate>
                    <Check TValue="bool" Checked="context.IsReturned" Disabled="true" ReadOnly="true" />
                </DisplayTemplate>
            </DataGridCheckColumn>
        </DataGridColumns>
    </DataGrid>
</Container>

@code {
    private DataGrid<IssueListlDTO> grid = new DataGrid<IssueListlDTO>();

    private bool filterVisible;
    private int? totalIssues;
    private List<IssueListlDTO> issues = new List<IssueListlDTO>();
    private IssuesFilter filter = new IssuesFilter();

    [CascadingParameter]
    protected MainLayout Main { get; set; } = new MainLayout();

    protected override async Task OnInitializedAsync()
    {
        totalIssues = (int)await issueService.GetTotalCount();
        Main?.ChangeTitle("Issues");
    }

    private async Task FilterChanged(IssuesFilter filter)
    {
        this.filter = filter;
        await grid.Reload();
    }

    private async Task OnReadData(DataGridReadDataEventArgs<IssueListlDTO> e)
    {
        var sortings = e.GetSortingCriteria().ToList();

        if (sortings.Count == 0)
        {
            sortings.Add((nameof(IssueListlDTO.IsReturned), ListSortDirection.Ascending));
            sortings.Add((nameof(IssueListlDTO.ExpiryDate), ListSortDirection.Ascending));
        }

        issues = await issueService.GetAll(e.Page, e.PageSize, filter, sortings);
        StateHasChanged();
    }

    private async Task ClearFilter()
    {
        filter = new IssuesFilter { IsReturned = filter.IsReturned };
        await grid.Reload();
    }
}
