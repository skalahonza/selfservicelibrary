@page "/search"
@using System.Web
@using SelfServiceLibrary.Web.Attributes
@using SelfServiceLibrary.Web.Extensions
@using SelfServiceLibrary.Web.Filters
@using SelfServiceLibrary.BL.Interfaces
@using SelfServiceLibrary.BL.DTO.Book
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider authenticationStateProvider
@inject IJSRuntime jsRuntime
@inject NavigationManager uriHelper
@inject IBookService bookService

<Container Fluid="true">
    <Form @onsubmit=Fulltext Margin="Margin.Is4.OnY">
        <Addons>
            <Addon AddonType="AddonType.Body">
                <TextEdit Placeholder="Type here..."
                          Role="TextRole.Search"
                          Text="@Query" TextChanged="QueryChanged" />
            </Addon>
            <Addon AddonType="AddonType.End">
                <Button Color="Color.Primary" Type="ButtonType.Submit"><Icon Name="IconName.Search" /></Button>
            </Addon>
        </Addons>
    </Form>
    @if (string.IsNullOrEmpty(Query))
    {
        // initial state
        <Jumbotron Background="Background.White" Margin="Margin.Is4.FromBottom">
            <JumbotronTitle Size="JumbotronTitleSize.Is4">Full-text search</JumbotronTitle>
            <JumbotronSubtitle>
                Search the database using an arbitrary text. The search results are sorted by relevance.
                Bellow are few examples of possible queries.
            </JumbotronSubtitle>
            <Divider />
            <ul>
                <li>Keywords search <code>Algebra genetics algorithm</code></li>
                <li>Search for a term as a whole <code>"Linear algebra"</code></li>
                <li>Keyword and author <code>tex Olšák</code></li>
                <li>To exclude a word, you can prepend a "-" character <code>Linear -algebra</code></li>
            </ul>
        </Jumbotron>
    }
    else if (searchResults.Values.Sum(x => x.Count) == 0)
    {
        <Jumbotron Background="Background.White" Margin="Margin.Is4.FromBottom" class="text-center">
            <JumbotronTitle Size="JumbotronTitleSize.Is4">Nothing found</JumbotronTitle>
            <JumbotronSubtitle>
                No records matched for your query. You can also try to search in Central Library of CTU.
            </JumbotronSubtitle>
            <Button Color="Color.Light" Type="ButtonType.Link" To="@SummonSearch" Target="Target.Blank">Search in Summon</Button>
            <Button Color="Color.Primary" Type="ButtonType.Link" To="@CentralLibrarySearch" Target="Target.Blank">Search in Central Library of CTU</Button>
        </Jumbotron>
    }
    else if (!string.IsNullOrEmpty(Query) && !string.IsNullOrEmpty(SelectedTab) && searchResults.ContainsKey(SelectedTab))
    {
        <BadgedTabs Tabs="@tabs.ToList()"
                    TabCounts="@searchResults.ToDictionary(x => x.Key, x => x.Value.Count)"
                    SelectedTab="@SelectedTab"
                    SelectedTabChanged="OnSelectedTabChanged" />

        <DataGrid RowSelectable=@(_ => false)
                  TItem="BookSearchDTO"
                  Data="@searchResults[SelectedTab]"
                  ShowPager="true"
                  ShowPageSizes="true"
                  PageSize="PageSize"
                  PageSizeChanged="PageSizeChanged"
                  CurrentPage="Page"
                  PageChanged="PageChanged"
                  PagerPosition="DataGridPagerPosition.Bottom">
            <DataGridColumns>
                <DataGridColumn TItem="BookSearchDTO" Field="@nameof(BookSearchDTO.Name)" Caption="Name" Sortable="true">
                    <DisplayTemplate>
                        <!-- Full name specified due to https://github.com/dotnet/aspnetcore/issues/18685 -->
                        <Blazorise.Link To="@($"books/{context.DepartmentNumber}")">@context.Name</Blazorise.Link>
                        <div><Badge Color="Color.Secondary">@context.DepartmentNumber</Badge></div>
                        <div><Keywords Words="context.Keywords" /></div>
                        @if (context.CoAuthors.Prepend(context.Author).Any(x => !string.IsNullOrEmpty(x)))
                        {
                            <div>
                                <Icon Name="IconName.User" /> @string.Join(", ", context.CoAuthors.Prepend(context.Author))
                            </div>
                        }
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridCheckColumn TItem="BookSearchDTO" Field="@nameof(BookSearchDTO.IsAvailable)" Caption="Available" Sortable="true">
                    <DisplayTemplate>
                        <Check TValue="bool" Checked="context.IsAvailable" Disabled="true" ReadOnly="true">
                            <div class="@(context.IsAvailable ? "text-success" : "text-danger")">
                                @(context.IsAvailable ? "Yes" : "No")
                            </div>
                        </Check>
                    </DisplayTemplate>
                </DataGridCheckColumn>
            </DataGridColumns>
        </DataGrid>
    }
</Container>

@code{
    private const string AllTab = "All";

    private DataGrid<BookListDTO> dataGrid = new DataGrid<BookListDTO>();

    private BooksFilter filter = new BooksFilter(AllTab);
    private IDictionary<string, List<BookSearchDTO>> searchResults = new Dictionary<string, List<BookSearchDTO>>
{
        {AllTab, new List<BookSearchDTO>()}
    };

    private IEnumerable<string> tabs => searchResults
        .Where(x => x.Key != AllTab)
        .OrderByDescending(x => x.Value.Count)
        .ThenBy(x => x.Key)
        .Select(x => x.Key)
        .Prepend(AllTab);

    private string SummonSearch => $"https://cvut.summon.serialssolutions.com/?#!/search?q={HttpUtility.UrlEncode(Query)}";
    private string CentralLibrarySearch => $"https://aleph.cvut.cz/F?func=find-b&find_code=WRD&local_base=DUPL&CON_LNG=CZE&request={HttpUtility.UrlEncode(Query)}";

    [CascadingParameter]
    protected MainLayout Main { get; set; } = new MainLayout();

    [QueryStringParameter]
    public string? Query { get; set; }

    [QueryStringParameter]
    public string? SelectedTab { get; set; }

    [QueryStringParameter]
    public int Page { get; set; } = 1;

    [QueryStringParameter]
    public int PageSize { get; set; } = 5;

    protected override async Task OnInitializedAsync()
    {
        var state = await authenticationStateProvider.GetAuthenticationStateAsync();
        filter.UserRoles = state.User.Claims.GetRoles();

        var types = await bookService.GetPublicationTypes(filter with { PublicationType = null });
        searchResults = types.ToDictionary(x => x.Key, _ => new List<BookSearchDTO>());
        searchResults[AllTab] = new List<BookSearchDTO>();
        Main?.ChangeTitle("Search");

        if (string.IsNullOrEmpty(SelectedTab))
            SelectedTab = AllTab;
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        this.SetParametersFromQueryString(uriHelper);
        await base.SetParametersAsync(parameters);
        await Fulltext();
    }

    private ValueTask UpdateQuery()
    {
        return this.UpdateQueryString(uriHelper, jsRuntime);
    }

    private async Task QueryChanged(string value)
    {
        Query = value;
        await UpdateQuery();
    }

    private async Task OnSelectedTabChanged(string name)
    {
        SelectedTab = name;
        await UpdateQuery();
        await dataGrid.Reload();
    }

    private async Task PageSizeChanged(int value)
    {
        PageSize = value;
        await UpdateQuery();
    }

    private async Task PageChanged(DataGridPageChangedEventArgs args)
    {
        Page = args.Page;
        await UpdateQuery();
    }

    private async Task Fulltext()
    {
        // search in all categories
        var result = string.IsNullOrEmpty(Query)
        ? new List<BookSearchDTO>()
        : await bookService.Fulltext(Query);

        var previousTab = SelectedTab;
        SelectedTab = AllTab;

        var lookup = result
            .Where(x => !string.IsNullOrEmpty(x.PublicationType))
            .ToLookup(x => x.PublicationType!)
            .ToDictionary(x => x.Key, x => x.ToList());

        foreach (var tab in searchResults)
        {
            if (lookup.TryGetValue(tab.Key, out var data))
            {
                // results found in a publication type
                searchResults[tab.Key] = data;
            }
            else
            {
                // no results in a publication type
                searchResults[tab.Key] = new List<BookSearchDTO>();
            }
        }

        searchResults[AllTab] = result;
        StateHasChanged();

        // HACK force active tab reselection, their order might change due to sorting based on found items
        SelectedTab = previousTab;
        StateHasChanged();
    }
}
