@page "/search"
@using SelfServiceLibrary.Service.Services
@using SelfServiceLibrary.Service.DTO.Book
@inject BookService bookService

<Bar Breakpoint="Breakpoint.Desktop"
     Background="Background.Light"
     ThemeContrast="ThemeContrast.Light">
    <BarBrand Display="Display.None.OnMobile.Block.OnTablet">
        Search
    </BarBrand>
    <BarMenu>
        <BarStart>
            <BarItem>
                <form @onsubmit=Fulltext>
                    <Addons Margin="Margin.Is3.OnX.OnTablet">
                        <Addon AddonType="AddonType.Body">
                            <TextEdit Placeholder="Algebra, genetics, algorithm"
                                      Role="TextRole.Search"
                                      @bind-Text="search" />
                        </Addon>
                        <Addon AddonType="AddonType.End">
                            <Button Color="Color.Primary" Type="ButtonType.Submit"><Icon Name="IconName.Search" /></Button>
                        </Addon>
                    </Addons>
                </form>
            </BarItem>
        </BarStart>
    </BarMenu>
</Bar>

<Container Fluid="true">
    <Tabs SelectedTab="@selectedTab"
          SelectedTabChanged="@OnSelectedTabChanged">
        <Items>
            @foreach (var (type, items) in searchResults.Select(x => (x.Key, x.Value)).OrderByDescending(x => x.Value.Count))
            {
                <Tab Name="@type">@type <Badge Color="Color.Primary">@items.Count</Badge></Tab>
            }
        </Items>
        <Content>
            @foreach (var (type, items) in searchResults.Select(x => (x.Key, x.Value)).OrderByDescending(x => x.Value.Count))
            {
                <TabPanel Name="@type">
                    <DataGrid RowSelectable=@(_ => false)
                              TItem="BookSearchDTO"
                              Data="@items"
                              ShowPager="true"
                              ShowPageSizes="true"
                              PagerPosition="DataGridPagerPosition.Top"
                              PageSize="10">
                        <DataGridColumn TItem="BookSearchDTO" Field="@nameof(BookSearchDTO.DepartmentNumber)" Caption="#" Sortable="false">
                            <DisplayTemplate>
                                <a href="@($"books/{context.DepartmentNumber}")">@context.DepartmentNumber</a>
                            </DisplayTemplate>
                        </DataGridColumn>
                        <DataGridColumn TItem="BookSearchDTO" Field="@nameof(BookSearchDTO.Name)" Caption="Name" Sortable="true" />
                        <DataGridColumn TItem="BookSearchDTO" Field="@nameof(BookSearchDTO.Author)" Caption="Author" Sortable="true" />
                        <DataGridColumn TItem="BookSearchDTO" Field="@nameof(BookSearchDTO.Keywords)" Caption="Keywords" Sortable="false">
                            <DisplayTemplate>
                                <Keywords Words="context.Keywords" />
                            </DisplayTemplate>
                        </DataGridColumn>
                        <DataGridCheckColumn TItem="BookSearchDTO" Field="@nameof(BookSearchDTO.IsAvailable)" Caption="Available" Sortable="true">
                            <DisplayTemplate>
                                <Check TValue="bool" Checked="context.IsAvailable" Disabled="true" ReadOnly="true" />
                            </DisplayTemplate>
                        </DataGridCheckColumn>
                    </DataGrid>
                </TabPanel>
            }
        </Content>
    </Tabs>
    
</Container>

<style>
    th {
        background: white;
        position: sticky;
        top: 0; /* Don't forget this, required for the stickiness */
        box-shadow: 0 2px 2px -1px rgba(0, 0, 0, 0.4);
        z-index: 10
    }
</style>

@code{
    private string selectedTab;
    private string search;

    private IDictionary<string, List<BookSearchDTO>> searchResults = new Dictionary<string, List<BookSearchDTO>>();

    private void OnSelectedTabChanged(string name)
    {
        selectedTab = name;
        StateHasChanged();
    }

    private void OnSearchChanged(string value)
    {
        search = value;
    }

    private async Task Fulltext()
    {
        var result = string.IsNullOrEmpty(search)
            ? new List<BookSearchDTO>()
            : await bookService.Fulltext(search);

        if (result.Any())
        {
            searchResults = result.GroupBy(x => x.PublicationType).ToDictionary(x => x.Key, x => x.ToList());
            selectedTab = searchResults.OrderByDescending(x => x.Value.Count).FirstOrDefault().Key;
        }
        else
        {
            searchResults?.Clear();
            selectedTab = null;
        }
    }
}
